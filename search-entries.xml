<znai>
  <entry>
    <url>/znai/introduction/what-is-this#beautiful-and-maintainable-user-guide</url>
    <fullTitle>Znai: What Is This, Beautiful and Maintainable User Guide [Introduction]</fullTitle>
    <text>
      <text>Znai combines human written text with artifacts such as code , graphs , REST API , Java Docs , Doxygen , etc. to create up-to-date, maintainable, beautiful User Guides and Tutorials. # Beautiful and Maintainable User Guide `Znai` combines human written text with artifacts such as `code`, `graphs`, `REST API`, `Java Docs`, `Doxygen`, etc. to create up-to-date, maintainable, beautiful **User Guides** and **Tutorials**. :include-flow-chart: artifacts-flow.json {vertical: true, highlight: "userguide"}</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/introduction/what-is-this#extensive-plugins-system</url>
    <fullTitle>Znai: What Is This, Extensive Plugins System [Introduction]</fullTitle>
    <text>
      <text>Znai extends markdown with plugins system to supercharge visuals and maintainability. Three categories of plugins are available for usage and creation Include markdown :include-json: example.json { title: "JSON example", paths: ["root.person.id"], collapsedPaths: ["root.details"] } markdown :include-java: ../java/HelloWorld.java { entry: "sampleMethod", bodyOnly: true, commentsType: "inline" } validate(); process(p2); // important comment notifyAll(p1); // very important return bestSample(); Inlined Code markdown It is a `:icon: cloud` day, `:icon: clock` is ticking It is a day, is ticking Fenced Block markdown ```tabs C++: content of C++ tab Java: content of Java tab Python: content of Python tab ``` C++ content of C++ tab Java content of Java tab Python content of Python tab</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/introduction/what-is-this#rich-visuals</url>
    <fullTitle>Znai: What Is This, Rich Visuals [Introduction]</fullTitle>
    <text>
      <text>Leverage multiple out-of-the box plugins to render charts, flow diagrams, annotated images, dynamic SVGs, etc</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/introduction/what-is-this#dark-light-runtime-mode</url>
    <fullTitle>Znai: What Is This, Dark/Light Runtime Mode [Introduction]</fullTitle>
    <text>
      <text>Generate one documentation and let your users switch Dark/Light theme at runtime</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/introduction/what-is-this#two-sides-page-layout</url>
    <fullTitle>Znai: What Is This, Two Sides Page Layout [Introduction]</fullTitle>
    <text>
      <text>Use layout/two-sides-tabs two sides layout option to render examples and supporting information side by side with convenient examples language switch</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/introduction/what-is-this#local-search</url>
    <fullTitle>Znai: What Is This, Local Search [Introduction]</fullTitle>
    <text>
      <text>Local search with preview and instant navigation to the result</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/introduction/what-is-this#auto-presentation</url>
    <fullTitle>Znai: What Is This, Auto Presentation [Introduction]</fullTitle>
    <text>
      <text>With a click of a button, Znai turns User Guide content to presentation slides. Single source of truth and minimal effort.Present a feature in a meeting and then share the same content as a link to the documentation.</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/introduction/what-is-this#batteries-included</url>
    <fullTitle>Znai: What Is This, Batteries Included [Introduction]</fullTitle>
    <text>
      <text>Znai comes withMarkdown with custom extensions and dozens of plugins:Content from external files with markers and filters support Simplified extraction of a function body content (working with examples) Embedding of JavaDoc/PyDoc documentation text, preserving styles Beautiful API documentation capabilities Two Sides Page Layout with convenient examples language switch Rich visuals like flow diagrams and charts etc Dev server mode with changes highlight and auto-jump to a change Local search (with full preview) Dark/light mode runtime switch Presentation Mode to automatically turn your documentation into slides, using the same content</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/introduction/getting-started#markdown</url>
    <fullTitle>Znai: Getting Started, Markdown [Introduction]</fullTitle>
    <text>
      <text>The fastest way to learn Markdown is to go to https://commonmark.org/help/ CommonMark website and go through a 60 second cheatsheet or 10 minute tutorial.</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/introduction/getting-started#running-znai</url>
    <fullTitle>Znai: Getting Started, Running Znai [Introduction]</fullTitle>
    <text>
      <text>Znai is available as #command-line Command Line #maven-plugin Maven Plugin Both command line and maven plugin lets you to build documentation website and also run preview server during documentation writing process.</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/introduction/getting-started#command-line</url>
    <fullTitle>Znai: Getting Started, Command Line [Introduction]</fullTitle>
    <text>
      <text>CLI download Download and unzip https://repo.maven.apache.org/maven2/org/testingisdocumenting/znai/znai-dist/1.63/znai-dist-1.63-znai.zip znai. Add it to your PATH . Brew brew install testingisdocumenting/brew/znai</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/introduction/getting-started#maven-plugin</url>
    <fullTitle>Znai: Getting Started, Maven Plugin [Introduction]</fullTitle>
    <text>
      <text>&lt;plugin> &lt;groupId>org.testingisdocumenting.znai&lt;/groupId> &lt;artifactId>znai-maven-plugin&lt;/artifactId> &lt;version>1.63&lt;/version> &lt;/plugin> Note: consider adding a separate module for documentation in the multi module maven project</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/introduction/getting-started#scaffolding</url>
    <fullTitle>Znai: Getting Started, Scaffolding [Introduction]</fullTitle>
    <text>
      <text>To create a minimum set of files for your documentation execute CLI znai --new Maven mvn znai:new znai |--chapter-one |--page-one.md |--page-two.md |--chapter-two |--page-three.md |--page-four.md |--toc |--lookup-paths |--meta.json Listed above directories and files will be generated in the current directory.</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/introduction/getting-started#preview-mode</url>
    <fullTitle>Znai: Getting Started, Preview Mode [Introduction]</fullTitle>
    <text>
      <text>Znai comes with preview mode. In preview mode, znai monitors changes you apply to the documentation files and notifies browser to navigates to the right page and highlights the changes.To start preview mode, navigate to the documentation directory ( znai if you used scaffold) and run CLI znai --preview [--port port-number] Maven mvn znai:preview &lt;plugin> &lt;groupId>org.testingisdocumenting.znai&lt;/groupId> &lt;artifactId>znai-maven-plugin&lt;/artifactId> &lt;version>1.63&lt;/version> &lt;configuration> &lt;port>3334&lt;/port> &lt;!-- optional override of default value 3333--> &lt;/configuration> &lt;/plugin> Open URL output by the command and open in a browser. Blue eye icon in the top right corner indicates that preview is on.Open any text editor, modify and save a markdown file. Changes will be reflected in the browser.</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/introduction/getting-started#static-site-generation</url>
    <fullTitle>Znai: Getting Started, Static Site Generation [Introduction]</fullTitle>
    <text>
      <text>To build static documentation site you need to provide documentation id . Documentation id becomes part of your url and is also used inside generated HTMLs to reference static resources using absolute path.For example, znai original documentation is hosted on https://testingisdocumenting.org/znai https://testingisdocumenting.org/znai and documentation id is znai .This original page is hosted on https://testingisdocumenting.org/znai/introduction/getting-started https://testingisdocumenting.org/znai/introduction/getting-started. znai generates each page as index.html and puts inside directories to make it possible to have an extension less urls.To make it easier to handle static resources loading, Znai builds all the urls inside HTML pages using absolute locations, and that's why it is required to provide documentation id during the site generation.To generate static site, use CLI znai --doc-id my-docs --deploy /path/to/static-content Maven &lt;plugin> &lt;groupId>org.testingisdocumenting.znai&lt;/groupId> &lt;artifactId>znai-maven-plugin&lt;/artifactId> &lt;version>1.63&lt;/version> &lt;configuration> &lt;docId>project-name&lt;/docId> &lt;deployRoot>/path/to/static-content&lt;/deployRoot> &lt;!-- default is ${project.build.directory} --> &lt;/configuration> &lt;/plugin></text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/introduction/getting-started#github-pages</url>
    <fullTitle>Znai: Getting Started, GitHub Pages [Introduction]</fullTitle>
    <text>
      <text>To deploy to https://pages.github.com GitHub Pages use https://github.com/peaceiris/actions-gh-pages GitHub Pages Action.Here is an example of znai publishing its documentation to github pages - name: deploy documentation uses: peaceiris/actions-gh-pages@v3 with: github_token: ${{ secrets.GITHUB_TOKEN }} publish_dir: ./znai-docs/target/znai</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/introduction/getting-started#on-site-central-hub-deployment</url>
    <fullTitle>Znai: Getting Started, On-site Central Hub Deployment [Introduction]</fullTitle>
    <text>
      <text>Znai has enterprise mode that lets you run Documentation hub inside your organization. It is completely free and open sourced.Please create a GitHub issue if you want to try it out. I don't document it yet as I only have a couple of scenarios I tried it on, and I need more input.</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/flow/structure#building-blocks</url>
    <fullTitle>Znai: Structure, Building Blocks [Flow]</fullTitle>
    <text>
      <text>Znai has three levels of documentation organization:Chapters Pages Page Sections Znai encourages authors to split their content across multiple pages.If you feel like you need to use nested headings, consider moving your content hierarchy one level up:Split overlong page into multiple ones Introduce chapters Focus on one thing at a time</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/flow/structure#similarity-with-oop</url>
    <fullTitle>Znai: Structure, Similarity with OOP [Flow]</fullTitle>
    <text>
      <text>It may be useful to compare documentation design to an object-oriented programming approach:Chapters as packages Pages as classes Page Sections as methods It is a bad practice to have a class with loosely related methods. Similarly, it is a bad practice to have a long page with loosely related sections.</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/flow/structure#table-of-contents</url>
    <fullTitle>Znai: Structure, Table of Contents [Flow]</fullTitle>
    <text>
      <text>Each documentation must have toc file in its root. This file contains chapters and pages.This is a toc file for this documentation. introduction what-is-this getting-started flow structure landing names page-references page-toc lookup-paths search footer support presentation testing shortcuts snippets code-snippets external-code-snippets snippets-manipulation code-comments inlined-code-snippets api-parameters code-references json xml open-API CLI math jupyter-notebook cpp python java groovy markdown visuals attention-signs images image-annotations cards charts mermaid-diagrams SVG icons headings text-badge spoilers keyboard-shortcuts smart-bullet-points flow-diagrams graphviz-diagrams PlantUml iframe layout tabs tables columns templates two-sides-pages two-sides-tabs jupyter-notebook-two-sides python content-extraction description-extraction auto-reference CPP doxygen-setup description-extraction auto-reference java content-extraction description-extraction auto-reference synergy-with-testing web-UI REST-API business-logic plugins plugin-types default-parameters development configuration basic example-references domain api znai-development local-build release-notes 2023 2022 2021 Take a look at the left side bar and compare it with the file content.The top entry, introduction , corresponds to the directory of the same name. The nested entry, rationale , corresponds to the file rationale.md .</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/flow/structure#sub-headings</url>
    <fullTitle>Znai: Structure, Sub Headings [Flow]</fullTitle>
    <text>
      <text>Only a first level heading is treated as a first class citizen:Part of TOC Smallest unit of search result # First Class Citizen Nested sub headings only add visual distinction within a page. ## Sub heading content of sub heading ### Sub Sub heading content of sub sub heading Sub heading content of sub heading Sub Sub heading content of sub sub heading</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/flow/structure#meta</url>
    <fullTitle>Znai: Structure, Meta [Flow]</fullTitle>
    <text>
      <text>Each documentation must have the meta.json file in its root. This JSON file contains documentation display name, type, and optional View On information. { "title": "Znai", "type": "User Guide", "category": "Documentation", "description": "Build functional, maintainable, beautiful User Guides with markdown and Znai plugins. Instant pages navigation. Local search. Multiple integrations to work with Python, Java, C++, OpenAPI, etc. Transform \"getting started\" sections into slideshow for your workshops. Manage multiple documentations with self-deployed znai hub.", "viewOn": { "link": "https://github.com/testingisdocumenting/znai/blob/master/znai-docs/znai", "title": "View Markdown" }, "support": { "link": "https://github.com/testingisdocumenting/znai/discussions", "title": "GitHub" } }</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/flow/landing#optional-index-landing-page</url>
    <fullTitle>Znai: Landing, Optional Index Landing Page [Flow]</fullTitle>
    <text>
      <text>Optional index.md file in the root is your landing page. Consider putting logos and high level information about your product there.Note: Landing page is not part of your Table Of Contents and is not present on navigation panel. Don't put essential information there as users may not get back there often.</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/flow/landing#auto-redirect</url>
    <fullTitle>Znai: Landing, Auto Redirect [Flow]</fullTitle>
    <text>
      <text>Use include-redirect plugin to automatically redirect from index page to any other page in your docs. markdown :include-redirect: chapter/page Use it if you don't know what to put on Landing Page or find yourself repeating the content in your next introduction page.If index.md is not present, users will be redirected to the first page in your Table Of Contents.</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/flow/names#automatic-names</url>
    <fullTitle>Znai: Page Titles, Automatic Names [Flow]</fullTitle>
    <text>
      <text>By default, page names are automatically derived from file names. file-name.md has the page title File Name .</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/flow/names#name-overrides</url>
    <fullTitle>Znai: Page Titles, Name Overrides [Flow]</fullTitle>
    <text>
      <text>To override the default, add the following syntax to the top of your Markdown file: --- title: Custom Name --- To keep things easy for future documentation owners, it's good practice to keep page and file names the same. In some cases, however, you want to make exceptions, for example, in cases where you:Need to use special characters in title Want to avoid auto-capitalization</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/flow/names#chapter-names</url>
    <fullTitle>Znai: Page Titles, Chapter Names [Flow]</fullTitle>
    <text>
      <text>By default, a chapter name is derived from dir name. Dir name my-chapter becomes My Chapter chapter name.To override a chapter name, use {title: "chapter title"} inside toc file text chapter-one {title: "Chapter ONE explicit"} structure setup</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/flow/page-references#follow-the-order</url>
    <fullTitle>Znai: Page References, Follow the Order [Flow]</fullTitle>
    <text>
      <text>The best documentation should be arranged with a natural order to follow. Links to navigate to the next page are at the end of each page.Create links to remind users of essential concepts introduced previously. There is a good chance that a reader skipped over these or forgot about them.Avoid: links that navigate users forward. It may break the flow of a documentation.</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/flow/page-references#links</url>
    <fullTitle>Znai: Page References, Links [Flow]</fullTitle>
    <text>
      <text>To create an external link use: markdown [Link Title](http://external/reference) To refer internal page within your documentation use: markdown [internal link](dir-name/file-name#optional-page-section-id) Note: you can get page-section-id by hovering over a section title and pressing link icon. Your browser URL display the updated link. Links to Subsection Linking to subsections is the same as linking to a top level section. flow/page-references#links-links-to-subsection Here is an example markdown [Here is an example](flow/page-references#links-links-to-subsection) Use #links Subsection Shortcut if a subsection is within the same page: markdown [Subsection Shortcut](#links) Index Page Clicking this / index page link will have the same effect as clicking the documentation title at the top of the Navigation PanelTo refer back to the top-level index page use: markdown [index page](/) [index page](/#link-to-subsection)</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/flow/page-references#downloads</url>
    <fullTitle>Znai: Page References, Downloads [Flow]</fullTitle>
    <text>
      <text>Linking to a local file will deploy the file along with the generated documentation. Clicking the link will open a file using the browser's default method. Download [test json file](data/test.json) Download data/test.json test json file</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/flow/page-references#validation</url>
    <fullTitle>Znai: Page References, Validation [Flow]</fullTitle>
    <text>
      <text>Local links are automatically validated during documentation build time. You will get a build time error if you refer to a page or a section/sub-section that does not exist.Pass --validate-external-links to enable external links validation.</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/flow/page-toc#section-one</url>
    <fullTitle>Znai: Page Toc, Section One [Flow]</fullTitle>
    <text>
      <text>Use include-page-toc to include page top level sections as links markdown :include-page-toc: some text</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/flow/page-toc#section-two</url>
    <fullTitle>Znai: Page Toc, Section Two [Flow]</fullTitle>
    <text>
      <text>some other text</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/flow/lookup-paths#files-reference-lookup</url>
    <fullTitle>Znai: Lookup Paths, Files Reference Lookup [Flow]</fullTitle>
    <text>
      <text>When you refer to a file using plugins like markdown :include-file: my-file.cpp Znai tries to find the file in following locations:directory with the markup file that refers my-file.cpp documentation root directory locations enumerated inside &lt;doc-root>/lookup-paths file txt ../examples ../module/src/main/java</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/flow/lookup-paths#cli-parameter</url>
    <fullTitle>Znai: Lookup Paths, CLI parameter [Flow]</fullTitle>
    <text>
      <text>Use --lookup-paths CLI parameter to add additional paths to lookup files. znai --lookup-paths /extra/path-one /extra/path-two</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/flow/lookup-paths#zip-and-jar-lookup</url>
    <fullTitle>Znai: Lookup Paths, Zip and Jar Lookup [Flow]</fullTitle>
    <text>
      <text>When Znai encounters zip or jar file listed inside lookup-paths it will unpack the archives into a temporary location and will use those locations to resolve files txt ../sources.zip ../module/archive.jar :include-file: dir/inside-zip-b.txt inside zip B</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/flow/lookup-paths#http-lookup-location</url>
    <fullTitle>Znai: Lookup Paths, HTTP Lookup Location [Flow]</fullTitle>
    <text>
      <text>If files you want to include are not part of your project, you can add an HTTP base URL to lookup-paths . txt ../examples ../module/src/main/java https://raw.githubusercontent.com/testingisdocumenting/webtau/master If the file is not found using local locations, it will be fetched from the provided urls. :include-file: .travis.yml language: java jdk: - openjdk8 - openjdk11 cache: directories: - $HOME/.m2 - $HOME/.npm - node_modules dist: xenial services: - xvfb addons: chrome: stable firefox: latest apt: packages: - graphviz # disables the default install step which is mvn install skipping tests install: true script: mvn -B verify -P code-coverage</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/flow/lookup-paths#class-path-lookup</url>
    <fullTitle>Znai: Lookup Paths, Class Path Lookup [Flow]</fullTitle>
    <text>
      <text>Znai is written using Java and can access resources from the classpath. Using class path lookup you can include snippets from projects deployed to, for example, Maven Central. &lt;plugin> &lt;groupId>org.testingisdocumenting.znai&lt;/groupId> &lt;artifactId>znai-maven-plugin&lt;/artifactId> &lt;version>${project.version}&lt;/version> &lt;dependencies> &lt;dependency> &lt;groupId>junit&lt;/groupId> &lt;artifactId>junit&lt;/artifactId> &lt;version>${junit.version}&lt;/version> &lt;classifier>sources&lt;/classifier> &lt;/dependency> &lt;/dependencies> &lt;/plugin> :include-java: org/junit/Assert.java {entry: "fail(String)"} public static void fail(String message) { if (message == null) { throw new AssertionError(); } throw new AssertionError(message); }</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/flow/search#local</url>
    <fullTitle>Znai: Search, Local [Flow]</fullTitle>
    <text>
      <text>To perform a local search of your documentation press / key or click the search section in the side panel on the left.In flow/structure documentation structure we learned that documentation consist ofChapters Pages Page Sections These entities play different and important roles in search. Search treats each Page Section as an independent unit. Each Page Section has an internally defined title that is a combination of all three titles.Title match during search yields the highest score.For example this current section full title is: Flow Search Local.As your documentation grows, keep checking how easy it is to navigate to a section of your documentation using / .Avoid: using generic names in your page titles and page section titles. You should not have dozens of pages called Introduction</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/flow/search#global</url>
    <fullTitle>Znai: Search, Global [Flow]</fullTitle>
    <text>
      <text>Besides local search capabilities, Znai provides a search entry XML file for your documentation. This file can be crawled to expose your documentation to external search engines.Your search entry file can be located at the following endpoint: &lt;base-url>/&lt;doc-id>/search-entries.xml For example, the search entry for the Znai documentation on Github is located at https://testingisdocumenting.org/znai/search-entries.xml https://testingisdocumenting.org/znai/search-entries.xml</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/flow/footer#definition</url>
    <fullTitle>Znai: Footer, Definition [Flow]</fullTitle>
    <text>
      <text>To define a footer, create a footer.md file in the root directory of your documentation files. Footer content will be treated as regular page content, i.e., you can use the standard Markdown and all the custom extensions.Content in footer.md will be displayed at the bottom of each page.</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/flow/support#linking-to-support-site</url>
    <fullTitle>Znai: Support, Linking To Support Site [Flow]</fullTitle>
    <text>
      <text>To provide a support link to your users add link and title to the meta.json file.Take a look at the example at the top of this page.</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/flow/presentation#equal-flow</url>
    <fullTitle>Znai: Presentation, Equal Flow [Flow]</fullTitle>
    <text>
      <text>When people build presentations, there should be great focus on the flow of information, making sure that those newly introduced to the topic are not lost. A poorly organized presentation might drive users seeking clarification to documentation, which too often is just as unfriendly to neophytes.Presentation mode in Znai is meant to help with both issues, mutually reinforcing good flow in presentations and documentation.</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/flow/presentation#presentation-mode</url>
    <fullTitle>Znai: Presentation, Presentation Mode [Flow]</fullTitle>
    <text>
      <text>Znai can turn any page into a presentation. Simply click to the far right of each page title.In presentation mode, only certain documentation elements are converted to slides:Headings Bullets Images and graphics Code snippets Command line input Math Tables If you write your documentation with a presentation in mind it should improve the flow of your documentation.</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/flow/testing#user-scenarios</url>
    <fullTitle>Znai: Testing, User Scenarios [Flow]</fullTitle>
    <text>
      <text>Focus your documentation on scenarios users can perform. Before documenting them, you need to make sure that they actually work. You could perform a manual test every time you release your software, but it is time consuming and error-prone.Alternatively, you could write automated tests to make sure that scenarios you are writing about are validated. At test run time, capture test produced artifacts:Command line output Screenshots Business logic calculation REST responses Config files Script snippets Runtime dependencies DAGs ... Include the captured artifacts inside your documentation to keep it up to date.As you write your documentation you will come up with new scenarios to test. As you write tests, think about your documentation and what test-produced artifacts can improve it.In this documentation you will learn how to include artifacts. There are also examples of synergy between tests and documentation in the later chapters.</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/flow/shortcuts#keyboard-shortcuts</url>
    <fullTitle>Znai: Shortcuts, Keyboard shortcuts [Flow]</fullTitle>
    <text>
      <text>Action Shortcut Change to presentation mode `:kbd: Alt =` or `:kbd: Alt +` Change to print mode `:kbd: Alt p` Change to default mode `:kbd: ESC` Activate search `:kbd: /` Navigate to a previous page `:kbd: Ctrl LeftArrow` Navigate to a next page `:kbd: Ctrl RightArrow`</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/code-snippets#simple-snippet</url>
    <fullTitle>Znai: Code Snippets, Simple Snippet [Snippets]</fullTitle>
    <text>
      <text>It is very easy to add a code snippet or an output result. All you have to do is indent your code with 4 spaces inside your Markdown document and your code will be rendered like this. interface PriceService { Money calcPrice(String cuips, Integer quantity); } # Simple Snippet It is very easy to add a code snippet or an output result. All you have to do is indent your code with 4 spaces inside your Markdown document and your code will be rendered like this. interface PriceService { Money calcPrice(String cuips, Integer quantity); } Note: this method doesn't highlight code.</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/code-snippets#specifying-language</url>
    <fullTitle>Znai: Code Snippets, Specifying Language [Snippets]</fullTitle>
    <text>
      <text>You can also specify a language to enable syntax highlighting for your snippet. ```javascript import React, {Component} from 'react' class MyComponent extends Component { render() { /// ... } } ``` javascript import React, {Component} from 'react' class MyComponent extends Component { render() { /// ... } } The following languages are supported:Java JavaScript Groovy C++ Python Bash Znai uses http://prismjs.com prismjs library to provide syntax highlighting. Note that it is not being executed inside the browser, but rather applied during HTML generation.</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/code-snippets#title</url>
    <fullTitle>Znai: Code Snippets, Title [Snippets]</fullTitle>
    <text>
      <text>Use the title property to specify a title. ```javascript {title: "ReactJS Component"} ... ``` javascript import React, {Component} from 'react' class MyComponent extends Component { render() { /// ... } }</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/code-snippets#wide-code</url>
    <fullTitle>Znai: Code Snippets, Wide Code [Snippets]</fullTitle>
    <text>
      <text>Use the wide option to stretch wide code to occupy as much horizontal real estate as possible. ```java {wide: true} class InternationalPriceService implements PriceService { private static void LongJavaInterfaceNameWithSuperFactory createMegaAbstractFactory(final ExchangeCalendarLongerThanLife calendar) { ... } } ``` java class InternationalPriceService implements PriceService { private static void LongJavaInterfaceNameWithSuperFactory createMegaAbstractFactory(final ExchangeCalendarLongerThanLife calendar) { ... } } Without the wide option code will be aligned with the rest of the text and users can use scrollbars. java class InternationalPriceService implements PriceService { private static void LongJavaInterfaceNameWithSuperFactory createMegaAbstractFactory(final ExchangeCalendarLongerThanLife calendar) { ... } } Note: Good placement of a Wide Code element is at the end of a page or a section to show the full version of a code sample.</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/code-snippets#wrap-code</url>
    <fullTitle>Znai: Code Snippets, Wrap Code [Snippets]</fullTitle>
    <text>
      <text>Use the wrap option to stretch wide code to occupy as much horizontal real estate as possible. ```java {wrap: true} class InternationalPriceService implements PriceService { private static void LongJavaInterfaceNameWithSuperFactory createMegaAbstractFactory(final ExchangeCalendarLongerThanLife calendar) { ... } } ``` java class InternationalPriceService implements PriceService { private static void LongJavaInterfaceNameWithSuperFactory createMegaAbstractFactory(final ExchangeCalendarLongerThanLife calendar) { ... } }</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/code-snippets#read-more</url>
    <fullTitle>Znai: Code Snippets, Read More [Snippets]</fullTitle>
    <text>
      <text>If you have a large code snippet and you want to initially display only a small fraction use the readMore option with an optional readMoreVisibleLines option to specify a number of initial lines displayed (default is 8). ```java {readMore: true, readMoreVisibleLines: 3} public class DocScaffolding { private final Path workingDir; private Map&lt;String, List&lt;String>> fileNameByDirName; ... ``` java public class DocScaffolding { private final Path workingDir; private Map&lt;String, List&lt;String>> fileNameByDirName; public DocScaffolding(Path workingDir) { this.workingDir = workingDir; this.fileNameByDirName = new LinkedHashMap&lt;&gt;(); } public void create() { createPages(); createToc(); createMeta(); createIndex(); createLookupPaths(); } private void createLookupPaths() { createFileFromResource("lookup-paths"); } private void createMeta() { createFileFromResource("meta.json"); } }</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/code-snippets#highlights</url>
    <fullTitle>Znai: Code Snippets, Highlights [Snippets]</fullTitle>
    <text>
      <text>Use the highlight option to bring readers attention to important lines. ```java {highlight: "workingDir"} public class DocScaffolding { private final Path workingDir; private Map&lt;String, List&lt;String>> fileNameByDirName; public DocScaffolding(Path workingDir) { ... } ``` java public class DocScaffolding { private final Path workingDir; private Map&lt;String, List&lt;String>> fileNameByDirName; public DocScaffolding(Path workingDir) { ... } Note: You will get a build-time error if the specified substring is not found in any of the snippet linesIt is recommended to pass a substring, but you can pass a line idx (starts from 0). Additionally you can combine two approaches and pass a list of things to highlight. ```java {highlight: [2, "..."]} public class DocScaffolding { private final Path workingDir; private Map&lt;String, List&lt;String>> fileNameByDirName; public DocScaffolding(Path workingDir) { ... } ``` java public class DocScaffolding { private final Path workingDir; private Map&lt;String, List&lt;String>> fileNameByDirName; public DocScaffolding(Path workingDir) { ... } Note: Order of lines to highlight is reflected during presentation mode</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/external-code-snippets#embedding-content</url>
    <fullTitle>Znai: External Code Snippets, Embedding Content [Snippets]</fullTitle>
    <text>
      <text>To reduce documentation maintenance burden avoid copy and paste of code snippets. Embed content by referencing existing files using the include-file plugin instead. :include-file: file-name.js This include- syntax will appear throughout the documentation and represents a family of custom Markdown extensions. class JsClass { constructor() { usefulAction() } } export default JsClass The file will be looked up using following rules:directory with a markup file root directory of a documentation all lookup paths listed in a lookup-paths file</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/external-code-snippets#syntax-highlighting</url>
    <fullTitle>Znai: External Code Snippets, Syntax highlighting [Snippets]</fullTitle>
    <text>
      <text>Syntax highlighting is automatically selected based file extension. E.g. extensions .c , .h , .cpp , .hpp are treated as C++. :include-file: simple.c #include &lt;iostream> using namespace std; int main() { cout &lt;&lt; "hello"; } :include-file: Hello.sc object Hello { def main(args: Array[String]) = { println("Hello, world") } } Use lang to force a different syntax highlighting :include-file: simple.c {lang: "java"} #include &lt;iostream> using namespace std; int main() { cout &lt;&lt; "hello"; } Note: File extensions and lang are case-insensitive.</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/external-code-snippets#title</url>
    <fullTitle>Znai: External Code Snippets, Title [Snippets]</fullTitle>
    <text>
      <text>:include-file: file-name.js {title: "ES6 class"} Use the title property to specify a title. class JsClass { constructor() { usefulAction() } } export default JsClass Use the autoTitle property to set title to be the file name. :include-file: file-name.js {autoTitle: true} class JsClass { constructor() { usefulAction() } } export default JsClass</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/external-code-snippets#anchor</url>
    <fullTitle>Znai: External Code Snippets, Anchor [Snippets]</fullTitle>
    <text>
      <text>When you specify a title, hover mouse over it to see a clickable anchor.Use anchorId to override auto generated identifier. :include-file: file-name.js {autoTitle: true, anchorId: "my-code-anchor"} class JsClass { constructor() { usefulAction() } } export default JsClass</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/external-code-snippets#wide-code</url>
    <fullTitle>Znai: External Code Snippets, Wide Code [Snippets]</fullTitle>
    <text>
      <text>Use the wide option to stretch wide code to occupy as much horizontal screen real estate as possible. :include-file: WideCode.java {wide: true} class InternationalPriceService implements PriceService { private static void LongJavaInterfaceNameWithSuperFactory createMegaAbstractFactory(final ExchangeCalendarLongerThanLife calendar) { ... } } Without the wide option code will be aligned with the rest of the text and users can use scrollbars. class InternationalPriceService implements PriceService { private static void LongJavaInterfaceNameWithSuperFactory createMegaAbstractFactory(final ExchangeCalendarLongerThanLife calendar) { ... } } Note: Good placement of a Wide Code element is at the end of a page or a section to show the full version of a code sample.</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/external-code-snippets#wrap-code</url>
    <fullTitle>Znai: External Code Snippets, Wrap Code [Snippets]</fullTitle>
    <text>
      <text>Use the wrap option to enable long lines wrapping. :include-file: WideCode.java {wrap: true} class InternationalPriceService implements PriceService { private static void LongJavaInterfaceNameWithSuperFactory createMegaAbstractFactory(final ExchangeCalendarLongerThanLife calendar) { ... } }</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/external-code-snippets#read-more</url>
    <fullTitle>Znai: External Code Snippets, Read More [Snippets]</fullTitle>
    <text>
      <text>If you have a file with large code snippet and you want to initially display only a small fraction use readMore option with an optional readMoreVisibleLines option to specify a number of initial lines displayed (default is 8). :include-file: LongFile.java {readMore: true, readMoreVisibleLines: 3} public class DocScaffolding { private final Path workingDir; private Map&lt;String, List&lt;String>> fileNameByDirName; public DocScaffolding(Path workingDir) { this.workingDir = workingDir; this.fileNameByDirName = new LinkedHashMap&lt;&gt;(); } public void create() { createPages(); createToc(); createMeta(); createIndex(); createLookupPaths(); } private void createLookupPaths() { createFileFromResource("lookup-paths"); } private void createMeta() { createFileFromResource("meta.json"); } }</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/external-code-snippets#collapse</url>
    <fullTitle>Znai: External Code Snippets, Collapse [Snippets]</fullTitle>
    <text>
      <text>Use collapsed: true|false to make code snippet collapsible. Note: title option is required markdown :include-file: file-name.js {title: "collapsible snippet", collapsed: true} class JsClass { constructor() { usefulAction() } } export default JsClass</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/external-code-snippets#no-gap</url>
    <fullTitle>Znai: External Code Snippets, No Gap [Snippets]</fullTitle>
    <text>
      <text>Use noGap: true to remove top/bottom margins when there are multiple snippets in a row. markdown :include-file: file-name.js {title: "part one", noGap: true, collapsed: false} :include-file: simple.c {title: "part two", collapsed: false} class JsClass { constructor() { usefulAction() } } export default JsClass #include &lt;iostream> using namespace std; int main() { cout &lt;&lt; "hello"; }</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/external-code-snippets#highlights</url>
    <fullTitle>Znai: External Code Snippets, Highlights [Snippets]</fullTitle>
    <text>
      <text>Use the highlight option to bring readers attention to the important lines. :include-file: file-name.js {highlight: "export"} class JsClass { constructor() { usefulAction() } } export default JsClass It is recommended to pass a substring, but you can pass a line idx (starts from 0). Additionally you can combine two approaches and pass a list of things to highlight. :include-file: file-name.js {highlight: ["export", 1]} class JsClass { constructor() { usefulAction() } } export default JsClass Note: Order of lines to highlight is reflected during presentation modeUse the highlightPath option to highlight lines specified in a separate file. :include-file: file-name.js {highlightPath: "lines-to-highlight.txt"} class JsClass { constructor() { usefulAction() } } export default JsClass class usefulAction</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/snippets-manipulation#surrounded-by</url>
    <fullTitle>Znai: Snippets Manipulation, Surrounded By [Snippets]</fullTitle>
    <text>
      <text>Use to extract code snippet surrounded by a marker # example-import-block import market # example-import-block def main(): # example: book trade id = market.book_trade('symbol', market.CURRENT_PRICE, 100) # example-end # example-cancel-trade market.cancel_trade(id) # example-cancel-trade if __name__ == "__main__": main() :include-file: python-examples.py { title: "extracted example with surroundedBy", surroundedBy: "# example-cancel-trade"} market.cancel_trade(id)</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/snippets-manipulation#multiple-surrounded-by</url>
    <fullTitle>Znai: Snippets Manipulation, Multiple Surrounded By [Snippets]</fullTitle>
    <text>
      <text>Pass a list to to extract multiple blocks :include-file: python-examples.py { title: "extracted example", surroundedBy: ["# example-import-block", "# example-cancel-trade"]} import market market.cancel_trade(id) Use to select separator(s) between blocks :include-file: python-examples.py { title: "extracted example", surroundedBy: ["# example-import-block", "# example-cancel-trade"], surroundedBySeparator: ["..."] } import market ... market.cancel_trade(id) Note: can be either single value or a list. Plugin will use a different separator for each block. Use null to have an empty line as a separator.</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/snippets-manipulation#replace</url>
    <fullTitle>Znai: Snippets Manipulation, Replace [Snippets]</fullTitle>
    <text>
      <text>Use to replace content of the resulting snippet markdown :include-file: python-examples.py { surroundedBy: "# example-cancel-trade", replace: ['id', '"trade_id"'] } market.cancel_trade("trade_id") Pass a list of lists to for multiple replaces markdown :include-file: python-examples.py { surroundedBy: "# example-cancel-trade", replace: [['id', '"trade_id"'], ["market", "api"]]} api.cancel_trade("trade_id")</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/snippets-manipulation#replace-regexp-groups</url>
    <fullTitle>Znai: Snippets Manipulation, Replace Regexp Groups [Snippets]</fullTitle>
    <text>
      <text>Use $1 regexp capture groups to create derived content hello1 world2 another3 line4 :include-file: replace-all-group.txt {replace: ["(\\w+)(\\d+)", "$2-$1"]} 1-hello 2-world 3-another 4-line</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/snippets-manipulation#start-end-line</url>
    <fullTitle>Znai: Snippets Manipulation, Start/End Line [Snippets]</fullTitle>
    <text>
      <text>Use , to extract specific content by using marker lines. # example-import-block import market # example-import-block def main(): # example: book trade id = market.book_trade('symbol', market.CURRENT_PRICE, 100) # example-end # example-cancel-trade market.cancel_trade(id) # example-cancel-trade if __name__ == "__main__": main() :include-file: python-examples.py {startLine: "example: book trade", endLine: "example-end"} # example: book trade id = market.book_trade('symbol', market.CURRENT_PRICE, 100) # example-end Note: Lines match doesn't have to be exact, contains is used.By default and are included in the rendered result. Use to remove markers. :include-file: python-examples.py { startLine: "example: book trade", endLine: "example-end", excludeStartEnd: true } id = market.book_trade('symbol', market.CURRENT_PRICE, 100) To exclude start or end line only use and</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/snippets-manipulation#include-contains</url>
    <fullTitle>Znai: Snippets Manipulation, Include Contains [Snippets]</fullTitle>
    <text>
      <text>Use to include only lines containing specified text(s). :include-file: python-examples.py { include: "import " } or :include-file: python-examples.py { include: ["import "] } import market</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/snippets-manipulation#exclude-contains</url>
    <fullTitle>Znai: Snippets Manipulation, Exclude Contains [Snippets]</fullTitle>
    <text>
      <text>Use to exclude lines containing specified text(s). :include-file: python-examples.py { exclude: "# example" } or :include-file: python-examples.py { exclude: ["# example"] } import market def main(): id = market.book_trade('symbol', market.CURRENT_PRICE, 100) market.cancel_trade(id) if __name__ == "__main__": main()</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/snippets-manipulation#include-regexp</url>
    <fullTitle>Znai: Snippets Manipulation, Include Regexp [Snippets]</fullTitle>
    <text>
      <text>Use to include only lines matching regexp(s). :include-file: python-examples.py { includeRegexp: "market.*_trade" } or :include-file: python-examples.py { includeRegexp: ["market.*_trade"] } id = market.book_trade('symbol', market.CURRENT_PRICE, 100) market.cancel_trade(id)</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/snippets-manipulation#exclude-regexp</url>
    <fullTitle>Znai: Snippets Manipulation, Exclude Regexp [Snippets]</fullTitle>
    <text>
      <text>Use to exclude lines matching regexp(s). :include-file: python-examples.py { excludeRegexp: ["if .* ==", "\\s+main", "# example", "^\\s*$"] } import market id = market.book_trade('symbol', market.CURRENT_PRICE, 100) market.cancel_trade(id)</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/code-comments#callout-comments</url>
    <fullTitle>Znai: Code Comments, Callout Comments [Snippets]</fullTitle>
    <text>
      <text>Use commentsType: "inline" to extract comments from a code and render them as bullet pointsGiven a file with comments class JsClass { constructor() { // new syntax for constructor } } export default JsClass // new syntax for ES6 modules :include-file: file-name-with-comments.js {commentsType: "inline"} class JsClass { constructor() { // new syntax for constructor } } export default JsClass // new syntax for ES6 modules Multiple comment lines can be put above a code line. All the comment lines will be merged and applied to the next code line. order = fetch_order() # explanation of why # strategic price calculation # is important here price = strategic_price_calc(order) order = fetch_order() # explanation of why # strategic price calculation # is important here price = strategic_price_calc(order)</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/code-comments#spoilers</url>
    <fullTitle>Znai: Code Comments, Spoilers [Snippets]</fullTitle>
    <text>
      <text>Set the spoiler property to initially hide explanations. It may be useful when teaching. :include-file: file-name-with-comments.js {commentsType: "inline", spoiler: true} Click on the spoiler to reveal the explanations: class JsClass { constructor() { // new syntax for constructor } } export default JsClass // new syntax for ES6 modules</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/code-comments#remove-comments</url>
    <fullTitle>Znai: Code Comments, Remove Comments [Snippets]</fullTitle>
    <text>
      <text>Use commentsType: "remove" to hide all the comments from a code snippet Given a file with comments class JsClass { constructor() { // new syntax for constructor } } export default JsClass // new syntax for ES6 modules :include-file: file-name-with-comments.js {commentsType: "remove"} class JsClass { constructor() { // new syntax for constructor } } export default JsClass // new syntax for ES6 modules</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/inlined-code-snippets#backtick</url>
    <fullTitle>Znai: Inlined Code Snippets, Backtick [Snippets]</fullTitle>
    <text>
      <text>To display inline code within a text, put it inside a backtick. Example: To check if an Exchange is closed, you need to use `ExchangeCalendar` Example: To check if an Exchange is closed, you need to use ExchangeCalendar</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/inlined-code-snippets#from-file</url>
    <fullTitle>Znai: Inlined Code Snippets, From File [Snippets]</fullTitle>
    <text>
      <text>To display inline code from a file, use the file inlined code plugin. Example: To access this feature, navigate to `:file: urlsample.txt`. Example: To access this feature, navigate to .</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/inlined-code-snippets#validated-identifier</url>
    <fullTitle>Znai: Inlined Code Snippets, Validated Identifier [Snippets]</fullTitle>
    <text>
      <text>Use identifier inlined code plugin to render inlined code and validate its spelling by looking at the provided file for match. Use it to make sure your documentation reflects the API changes and do not use outdated identifier names `:identifier: my_func {validationPath: "my_func_usage.py"}` def example(): my_func(100) Specify multiple files via plugins/default-parameters#page-local-defaults page local or plugins/default-parameters#global-defaults global plugin defaults to avoid repeating validationPath throughout the page. --- identifier: {validationPath: ["python/my_func_usage.py", "python/utils.py"]} --- markdown my text `:identifier: my_func`</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/api-parameters#inlined-csv</url>
    <fullTitle>Znai: API Parameters, Inlined CSV [Snippets]</fullTitle>
    <text>
      <text>Use api-parameters fenced code plugin to document API parameters. ```api-parameters firstName, String, description with *markdown* support score, Integer, another description line with *markdown* support ``` firstName String description with markdown support score Integer another description line with markdown support</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/api-parameters#nested</url>
    <fullTitle>Znai: API Parameters, Nested [Snippets]</fullTitle>
    <text>
      <text>Use parent.child syntax to define nested objects like this: ```api-parameters sessionId, Integer, session Id person, Person, person to login with person.firstName, String, first name of the person person.lastName, String, last name of the person roles, List&lt;Role>, list of authorized roles roles.id, String, role id roles.description, String, role description ``` Note: when using this approach it is necessary to explicitly define a root entry, such as person in this example. sessionId Integer session Id person Person person to login with firstName String first name of the person lastName String last name of the person roles List&lt;Role> list of authorized roles id String role id description String role description Note: if a parameter name actually contains a period ("."), you can prevent this nesting behavior by putting the parameter name in single quotes, e.g. "person.firstName"</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/api-parameters#title</url>
    <fullTitle>Znai: API Parameters, Title [Snippets]</fullTitle>
    <text>
      <text>Use the title parameter to specify a title. ```api-parameters {title: "person definition"} firstName, String, description with *markdown* support score, Integer, another description line with *markdown* support ``` firstName String description with markdown support score Integer another description line with markdown support</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/api-parameters#collapsing-parameters</url>
    <fullTitle>Znai: API Parameters, Collapsing Parameters [Snippets]</fullTitle>
    <text>
      <text>Use collapsed: true|false to make api-parameters collapsible. markdown ```api-parameters {title: "address definition", anchorPrefix: "title", collapsed: true} city, String, city name zipCode, String, zip code ``` city String city name zipCode String zip code Note: collapsed requires title to be present</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/api-parameters#no-gap</url>
    <fullTitle>Znai: API Parameters, No Gap [Snippets]</fullTitle>
    <text>
      <text>Use noGap: true to remove top/bottom margins when there are multiple parameter instances in a row. markdown ```api-parameters { title: "person definition", anchorPrefix: "title", collapsed: false, noGap: true } firstName, String, description with *markdown* support score, Integer, another description line with *markdown* support ``` ```api-parameters {title: "address definition", anchorPrefix: "title", collapsed: true} city, String, city name zipCode, String, zip code ``` firstName String description with markdown support score Integer another description line with markdown support city String city name zipCode String zip code</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/api-parameters#size</url>
    <fullTitle>Znai: API Parameters, Size [Snippets]</fullTitle>
    <text>
      <text>Use the small parameter to render API Parameters using smaller font size and occupying less width ```api-parameters {small: true} firstName, String, description with *markdown* support score, Integer, another description line with *markdown* support ``` firstName String description with markdown support score Integer another description line with markdown support</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/api-parameters#multi-line-csv-description</url>
    <fullTitle>Znai: API Parameters, Multi-line CSV Description [Snippets]</fullTitle>
    <text>
      <text>Use quotes " to wrap a multiline description. Here is an example of description including multiple lines and nested code block example. `````api-parameters cores, String, " ``` execute(cores: 10) ``` Specify how many cores to allocate for execution " gpu, Boolean, " ``` execute(cores: 10, gpu: true) ``` Specify whether to use gpu " ````` cores String execute(cores: 10) Specify how many cores to allocate for execution gpu Boolean execute(cores: 10, gpu: true) Specify whether to use gpu Note: Use larger number of backticks on outside then inside to distinct between api-parameters plugin boundaries and nested code blocks</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/api-parameters#external-json-file</url>
    <fullTitle>Znai: API Parameters, External JSON File [Snippets]</fullTitle>
    <text>
      <text>Instead of hard-coding your parameters inside markdown files, you can specify an external JSON file. JSON could be generated based on the data you have. Some examples:build time annotation processor test time command line parameters generation Given the above file, use :include-api-parameters: api-parameters.json {title: "Person Definition"} to display it as API Parameters sessionId Integer session Id person Person person to login with firstName String first name of the person lastName String last name of the person roles List&lt;Role> list of authorized roles id String role id description String role description Note: description field in JSON file is treated as Markdown</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/api-parameters#anchors</url>
    <fullTitle>Znai: API Parameters, Anchors [Snippets]</fullTitle>
    <text>
      <text>Each API parameter has an anchor associated with it. You need to hover over parameter name for it to appear. Use anchorPrefix parameter to avoid conflict of anchor ids when using the same API parameter names within a single page: ```api-parameters {anchorPrefix: "customPrefix"} firstName, String, description with *markdown* support score, Integer, another description line with *markdown* support ``` firstName String description with markdown support score Integer another description line with markdown support In the example above customPrefix is added to each parameter link.</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/api-parameters#long-parameter-names</url>
    <fullTitle>Znai: API Parameters, Long Parameter Names [Snippets]</fullTitle>
    <text>
      <text>Znai hard wraps long parameter names to leave more space to description. VERY_LONG_PARAMETER_NAME_WITHOUT_SPACES String description with markdown support VERY_LONG_ANOTHER_PARAMETER_NAME_WITHOUT_SPACES String another description line with markdown support Use noWrap: true to remove hard wrap enforcement ```api-parameters {anchorPrefix: "customPrefix", noWrap: true} VERY_LONG_PARAMETER_NAME_WITHOUT_SPACES, String, description with *markdown* support VERY_LONG_ANOTHER_PARAMETER_NAME_WITHOUT_SPACES, String, another description line with *markdown* support ``` VERY_LONG_PARAMETER_NAME_WITHOUT_SPACES String description with markdown support VERY_LONG_ANOTHER_PARAMETER_NAME_WITHOUT_SPACES String another description line with markdown support</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/api-parameters#wide-mode</url>
    <fullTitle>Znai: API Parameters, Wide Mode [Snippets]</fullTitle>
    <text>
      <text>Use wide: true to use all the available horizontal space ```api-parameters {anchorPrefix: "customPrefix", noWrap: true, wide: true} VERY_LONG_PARAMETER_NAME_WITHOUT_SPACES, String, "longer line longer line, description with *markdown* support" VERY_LONG_ANOTHER_PARAMETER_NAME_WITHOUT_SPACES, String, "longer line longer line, another description line with *markdown* support and few moe lines" ``` VERY_LONG_PARAMETER_NAME_WITHOUT_SPACES String longer line longer line, description with markdown support VERY_LONG_ANOTHER_PARAMETER_NAME_WITHOUT_SPACES String longer line longer line, another description line with markdown support and few moe lines</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/code-references#local-references</url>
    <fullTitle>Znai: Code References, Local References [Snippets]</fullTitle>
    <text>
      <text>You can turn parts of a code snippet into links to internal or external pages.To do that, define references in a CSV file, using a two column format: expression, link . constructor, https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/constructor usefulAction, example-references/api#useful-action :include-file: file-name.js {referencesPath: "references/references-demo.csv"} class JsClass { constructor() { usefulAction() } } export default JsClass JSON format is also supported</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/code-references#page-defaults</url>
    <fullTitle>Znai: Code References, Page Defaults [Snippets]</fullTitle>
    <text>
      <text>Use plugin plugins/default-parameters#page-local-defaults Page Local Defaults to set references file that is relevant to the page at hand.</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/code-references#global-references</url>
    <fullTitle>Znai: Code References, Global References [Snippets]</fullTitle>
    <text>
      <text>Add references to references.csv or references.json if you want all your code snippets to use the same references. { "fapi.book": "example-references/api#book", "fapi.query": "example-references/api#query" } import * as fapi from 'flight-api' function bookFlight(flightInfo) { const confirmation = fapi.book(flightInfo) //... } function flightStatus(id) { const fullStatus = fapi.query(id) return fullStatus.shortStatus }</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/code-references#inlined-code</url>
    <fullTitle>Znai: Code References, Inlined Code [Snippets]</fullTitle>
    <text>
      <text>snippets/inlined-code-snippets Inlined code is automatically converted into a link if its content matches one of the global references entries: Use `fapi.book` to book a flight. Use fapi.book to book a flight.</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/json#auto-formatting</url>
    <fullTitle>Znai: Json, Auto Formatting [Snippets]</fullTitle>
    <text>
      <text>Use json fence block to render auto formatted json and use extra capabilities described below ```json [{"key1": "value1"}, {"key2": "value2"}] ``` Use json include plugin to read json from an external file [{"key1": "value1"}, {"key2": "value2"}] :include-json: simple.json</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/json#highlight-values-by-path</url>
    <fullTitle>Znai: Json, Highlight Values By Path [Snippets]</fullTitle>
    <text>
      <text>Use the plugin parameter to bring attention to a certain place in a JSON file. ```json {paths: "root[1].key2"} [{"key1": "value1"}, {"key2": "value2"}] ``` Pass multiple values to to highlight more than one leaf value :include-json: book-store.json {paths: ["root.store.book[0].category", "root.store.book[2].category"]} Comma-separated paths specified inside will be highlighted.</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/json#highlight-by-path-from-file</url>
    <fullTitle>Znai: Json, Highlight By Path From File [Snippets]</fullTitle>
    <text>
      <text>Use to specify a file to read paths from. :include-json: book-store.json {pathsFile: "book-store-paths.json"}</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/json#json-subparts</url>
    <fullTitle>Znai: Json, Json Subparts [Snippets]</fullTitle>
    <text>
      <text>To include only a portion of your document pass https://github.com/json-path/JsonPath Json Path as property: :include-json: book-store.json {include: "$..book[0,1]"}</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/json#enclose-in-object</url>
    <fullTitle>Znai: Json, Enclose In Object [Snippets]</fullTitle>
    <text>
      <text>Use to wrap any JSON and include result into parent object(s) :include-json: book-store.json {encloseInObject: "books.rare", include: "$..book[0,1]"}</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/json#title</url>
    <fullTitle>Znai: Json, Title [Snippets]</fullTitle>
    <text>
      <text>Use title parameter to specify a snippet title: :include-json: book-store.json {include: "$..book[0,1]", title: "Books"} Use autoTitle: true to automatically set title to specified file name :include-json: book-store.json {include: "$..book[0,1]", autoTitle: true}</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/json#anchor</url>
    <fullTitle>Znai: Json, Anchor [Snippets]</fullTitle>
    <text>
      <text>When you specify a title, hover mouse over it to see a clickable anchor.Use anchorId to override auto generated identifier. :include-json: book-store.json {include: "$..book[0,1]", title: "Books", anchorId: "my-books"}</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/json#read-more</url>
    <fullTitle>Znai: Json, Read More [Snippets]</fullTitle>
    <text>
      <text>Use readMore to show only first lines of JSON . Optional readMoreVisibleLines can be specified to set the initial number of lines to display :include-json: book-store.json {readMore: true, readMoreVisibleLines: 5}</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/json#hidden-parts</url>
    <fullTitle>Znai: Json, Hidden Parts [Snippets]</fullTitle>
    <text>
      <text>To hide sub-parts of your JSON use collapsedPaths property. :include-json: book-store.json {collapsedPaths: ['root.store.book']}</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/json#highlights</url>
    <fullTitle>Znai: Json, Highlights [Snippets]</fullTitle>
    <text>
      <text>To highlight a specific JSON value using paths , in (similar fashion to snippets/external-code-snippets#highlights regular code snippets), you can highlight a line by text matching or by providing a line index. :include-json: book-store.json {highlight: ["category", 2]}</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/json#code-references</url>
    <fullTitle>Znai: Json, Code References [Snippets]</fullTitle>
    <text>
      <text>You can turn parts of JSON into links to internal or external pages. :include-json: trader.json { title: "trader", referencesPath: "references/json-references-demo.csv" } trader, example-references/domain#trader transaction, example-references/domain#transaction</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/json#test-results</url>
    <fullTitle>Znai: Json, Test Results [Snippets]</fullTitle>
    <text>
      <text>Below is an example of using https://github.com/testingisdocumenting/webtau WebTau testing framework to make an HTTP call, extract JSON response and information about asserted fields to highlight. http.get("/weather") { temperature.shouldBe &lt; 100 } http.doc.capture("weather-example") http.doc.capture captures multiple test artifacts into separate files: request/response.json, url.txt, paths.json (validated paths). markdown :include-json: weather-example/response.json { title: "weather response example", pathsFile: "weather-example/paths.json" }</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/json#incomplete-json</url>
    <fullTitle>Znai: Json, Incomplete JSON [Snippets]</fullTitle>
    <text>
      <text>All the features above require fully formed JSON. If you need only syntax highlighting use snippets/external-code-snippets include-file plugin :include-file: incomplete.json { "config": { ... } }</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/xml#highlight-parts</url>
    <fullTitle>Znai: Xml, Highlight Parts [Snippets]</fullTitle>
    <text>
      <text>Use the include-xml plugin to bring attention to a certain place in a XML file.Comma-separated paths specified inside paths will be highlighted. :include-xml: menu.html {paths: ["ul.@class", "ul.li[1].@class", "ul.li[2]"]} Note: Children index in paths starts with 0 and is associated with a tag :include-xml: simple.xml {paths: ["root.a[1]", "root.b[0]", "root.c[0]"]}</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/xml#use-cases</url>
    <fullTitle>Znai: Xml, Use Cases [Snippets]</fullTitle>
    <text>
      <text>include-xml and paths can be used to document:XML Config CSS selectors ReactJS properties AngularJS templates In presentation mode, paths will be highlighted one at a time.</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/xml#title</url>
    <fullTitle>Znai: Xml, Title [Snippets]</fullTitle>
    <text>
      <text>Use the title property to specify a title. :include-xml: menu.html {title: "Menu snippet"}</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/open-API#operation-by-method-and-path</url>
    <fullTitle>Znai: Open API, Operation By Method And Path [Snippets]</fullTitle>
    <text>
      <text>If you have a file with an https://github.com/OAI/OpenAPI-Specification/blob/master/README.md Open API definition (a.k.a. a Swagger file) you can render it by a given method and path , or by operationId . Both yaml and json formats are supported.Let's consider https://github.com/OAI/OpenAPI-Specification/blob/master/examples/v2.0/json/uber.json Uber's API definition as an example: :include-open-api: open-api/uber.json {method: "get", path: "/estimates/time"} Responses 200 default Note: descriptions are treated as Markdown, using the https://commonmark.org/help/ CommonMark specification</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/open-API#operation-by-id</url>
    <fullTitle>Znai: Open API, Operation By ID [Snippets]</fullTitle>
    <text>
      <text>Let's take a pet store example. Use operationId to include operation definition by ID. :include-open-api: petstore-openapi3.json {operationId: "updatePet"} Request Responses 200 400 404 405</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/open-API#add-a-new-pet-to-the-store</url>
    <fullTitle>Znai: Open API, Add a new pet to the store [Snippets]</fullTitle>
    <text>
      <text>Use the autoSection property to automatically generate a page section with a title taken from an operation summary. :include-open-api: petstore-openapi3.json {operationId: "addPet", autoSection: true} Note: The section below is automatically generated by include-open-api Request Responses 200 405</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/open-API#time-estimates</url>
    <fullTitle>Znai: Open API, Time Estimates [Snippets]</fullTitle>
    <text>
      <text>Specify tags to automatically generate multiple entries from a service definition file. :include-open-api: open-api/uber.yaml {tags: "Estimates", autoSection: true} Note: The sections below are automatically generated by include-open-api Responses 200 default Responses 200 default</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/open-API#two-sides-layout</url>
    <fullTitle>Znai: Open API, Two Sides Layout [Snippets]</fullTitle>
    <text>
      <text>Znai supports layout/two-sides-pages Two Sides Layout mode that is perfect to supplement API documentation with examples column. layout/two-sides-pages#open-api-example Open API example</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/CLI#parameters-highlight</url>
    <fullTitle>Znai: CLI, Parameters Highlight [Snippets]</fullTitle>
    <text>
      <text>To bring attention to important parameters in your CLI examples use the cli fence plugin. ```cli {highlight: "important"} my-super-command paramA --important-flag=true ``` my-super-command paramA --important-flag=true Note: Parameter names gets matched as long as their names contain the passed value. markdown ```cli {highlight: "important"} my-super-command paramA --important-flag=true another-command stop ``` my-super-command paramA --important-flag=true another-command stop</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/CLI#include-plugin</url>
    <fullTitle>Znai: CLI, Include Plugin [Snippets]</fullTitle>
    <text>
      <text>Alternatively to fence plugin above, you can use include type. Note: options listed below are applicable to either form :include-cli-command: my-super-command paramA --important-flag=true {highlight: "important"} my-super-command paramA --important-flag=true</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/CLI#long-commands</url>
    <fullTitle>Znai: CLI, Long Commands [Snippets]</fullTitle>
    <text>
      <text>Long command lines will be automatically wrapped into multiple lines. another-command --score=2 --name=Name --value=8 --long-parameter-test --another-long-parameter1 --another-long-parameter2 --another-long3 Use threshold parameter to specify the max length of a line before splitting: :include-cli-command: another-command --score=2 --name=Name --value=8 --long-parameter-test --another-long-parameter1 --another-long-parameter2 --another-long3 { highlight: ["name", "value"], threshold: 30 } another-command --score=2 --name=Name --value=8 --long-parameter-test --another-long-parameter1 --another-long-parameter2 --another-long3 Use splitAfter to force line splitting after specified parameter: :include-cli-command: another-command --score=2 --name=Name --value=8 --long-parameter-test --another-long-parameter1 --another-long-parameter2 --another-long3 { highlight: ["name", "value"], splitAfter: ["--score=2", "--value=8"] } another-command --score=2 --name=Name --value=8 --long-parameter-test --another-long-parameter1 --another-long-parameter2 --another-long3 Note: Unlike highlight , splitAfter must be an exact match</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/CLI#handle-special-symbols</url>
    <fullTitle>Znai: CLI, Handle Special Symbols [Snippets]</fullTitle>
    <text>
      <text>If your command contains special symbols, such as { , move the command definition to a command option :include-cli-command: {command: "another-command {file1} [file2]", highlight: ["file1"]} another-command {file1} [file2]</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/CLI#from-file</url>
    <fullTitle>Znai: CLI, From File [Snippets]</fullTitle>
    <text>
      <text>You can read a command from file. :include-cli-command: {commandFile: "cli/command.txt", highlight: "value"} my-captured-command --param=10 --another=value my-captured-command --param=10 --another=value This option is useful for displaying a captured command during tests.</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/CLI#ansi-colors-output</url>
    <fullTitle>Znai: CLI, ANSI Colors Output [Snippets]</fullTitle>
    <text>
      <text>CLI renders ANSI colors automatically. webtau:000> http.get("https://jsonplaceholder.typicode.com/todos/1") > executing HTTP GET https://jsonplaceholder.typicode.com/todos/1 . header.statusCode equals 200 matches: header.statusCode: actual: 200 &lt;java.lang.Integer> expected: 200 &lt;java.lang.Integer> (47ms) { "userId": 1, "id": 1, "title": "delectus aut autem", "completed": false } . executed HTTP GET https://jsonplaceholder.typicode.com/todos/1 (342ms) :include-cli-output: cli/ansi.out webtau:000> http.get("https://jsonplaceholder.typicode.com/todos/1") > executing HTTP GET https://jsonplaceholder.typicode.com/todos/1 . header.statusCode equals 200 matches: header.statusCode: actual: 200 &lt;java.lang.Integer> expected: 200 &lt;java.lang.Integer> (47ms) { "userId": 1, "id": 1, "title": "delectus aut autem", "completed": false } . executed HTTP GET https://jsonplaceholder.typicode.com/todos/1 (342ms)</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/CLI#title</url>
    <fullTitle>Znai: CLI, Title [Snippets]</fullTitle>
    <text>
      <text>Use title to specify output of the output :include-cli-output: cli/ansi.out {title: "captured output"} webtau:000> http.get("https://jsonplaceholder.typicode.com/todos/1") > executing HTTP GET https://jsonplaceholder.typicode.com/todos/1 . header.statusCode equals 200 matches: header.statusCode: actual: 200 &lt;java.lang.Integer> expected: 200 &lt;java.lang.Integer> (47ms) { "userId": 1, "id": 1, "title": "delectus aut autem", "completed": false } . executed HTTP GET https://jsonplaceholder.typicode.com/todos/1 (342ms)</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/CLI#anchor</url>
    <fullTitle>Znai: CLI, Anchor [Snippets]</fullTitle>
    <text>
      <text>When you specify a title, hover mouse over it to see a clickable anchor.Use anchorId to override auto generated identifier. :include-cli-output: cli/ansi.out { title: "captured output", anchorId: "my-output" } webtau:000> http.get("https://jsonplaceholder.typicode.com/todos/1") > executing HTTP GET https://jsonplaceholder.typicode.com/todos/1 . header.statusCode equals 200 matches: header.statusCode: actual: 200 &lt;java.lang.Integer> expected: 200 &lt;java.lang.Integer> (47ms) { "userId": 1, "id": 1, "title": "delectus aut autem", "completed": false } . executed HTTP GET https://jsonplaceholder.typicode.com/todos/1 (342ms)</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/CLI#output-highlight</url>
    <fullTitle>Znai: CLI, Output Highlight [Snippets]</fullTitle>
    <text>
      <text>Use to highlight lines :include-cli-output: cli/ansi.out { title: "captured output", "highlight": "GET https" } webtau:000> http.get("https://jsonplaceholder.typicode.com/todos/1") > executing HTTP GET https://jsonplaceholder.typicode.com/todos/1 . header.statusCode equals 200 matches: header.statusCode: actual: 200 &lt;java.lang.Integer> expected: 200 &lt;java.lang.Integer> (47ms) { "userId": 1, "id": 1, "title": "delectus aut autem", "completed": false } . executed HTTP GET https://jsonplaceholder.typicode.com/todos/1 (342ms) Use to highlight lines based on the content of a file :include-cli-output: cli/ansi.out {highlightPath: "cli/file-path-of-asserted-lines.txt"} statusCode equals 200 executed HTTP GET webtau:000> http.get("https://jsonplaceholder.typicode.com/todos/1") > executing HTTP GET https://jsonplaceholder.typicode.com/todos/1 . header.statusCode equals 200 matches: header.statusCode: actual: 200 &lt;java.lang.Integer> expected: 200 &lt;java.lang.Integer> (47ms) { "userId": 1, "id": 1, "title": "delectus aut autem", "completed": false } . executed HTTP GET https://jsonplaceholder.typicode.com/todos/1 (342ms)</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/CLI#wide-mode</url>
    <fullTitle>Znai: CLI, Wide Mode [Snippets]</fullTitle>
    <text>
      <text>Use wide option to occupy as much horizontal space as available :include-cli-output: cli/wide-output.out { title: "Captured output", wide: true } long line from captured output long line from captured output long line from captured output long line from captured output long line from captured output long line from captured output long line from captured output long line from captured output long line from captured output long line from captured output long line from captured output long line from captured output long line from captured output long line from captured output long line from captured output long line from captured output long line from captured output long line from captured output long line from captured output long line from captured output long line from captured output long line from captured output long line from captured output long line from captured output long line from captured output long line from captured output long line from captured output long line from captured output long line from captured output long line from captured output long line from captured output long line from captured output long line from captured output long line from captured output long line from captured output long line from captured output long line from captured output long line from captured output long line from captured output long line from captured output long line from captured output long line from captured output long line from captured output long line from captured output long line from captured output long line from captured output long line from captured output long line from captured output</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/CLI#extract-snippets</url>
    <fullTitle>Znai: CLI, Extract Snippets [Snippets]</fullTitle>
    <text>
      <text>Use startLine , endLine to extract specific content by using marker lines. :include-cli-output: cli/file-path-of-captured.out { title: "Limited captured output", startLine: "git push", endLine: "master -> master" } Mykolas-MacBook-Pro:znai-reactjs mykola$ git push Counting objects: 13, done. Delta compression using up to 8 threads. Compressing objects: 100% (13/13), done. Writing objects: 100% (13/13), 1.25 KiB | 0 bytes/s, done. Total 13 (delta 11), reused 0 (delta 0) remote: Resolving deltas: 100% (11/11), completed with 11 local objects. To https://github.com/testingisdocumenting/znai.git e310685..900e0be master -> master More on snippets extractions: snippets/snippets-manipulation Snippets Manipulation.</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/CLI#presentation-mode</url>
    <fullTitle>Znai: CLI, Presentation Mode [Snippets]</fullTitle>
    <text>
      <text>In presentation mode, cli command related plugins will simulate typing inside the terminal.You can gradually reveal cli-output by providing revealLineStop parameter. :include-cli-output: cli/file-path-of-captured.out {revealLineStop: [0, 4], highlight: "remote"} Passed will highlight each line as a separate slide. Delta compression using up to 8 threads. Compressing objects: 100% (16/16), done. Writing objects: 100% (16/16), 1.34 KiB | 0 bytes/s, done. Total 16 (delta 14), reused 0 (delta 0) remote: Resolving deltas: 100% (14/14), completed with 10 local objects. To https://github.com/testingisdocumenting/znai.git ea44003..e310685 master -> master Mykolas-MacBook-Pro:znai-reactjs mykola$ git push Counting objects: 13, done. Delta compression using up to 8 threads. Compressing objects: 100% (13/13), done. Writing objects: 100% (13/13), 1.25 KiB | 0 bytes/s, done. Total 13 (delta 11), reused 0 (delta 0) remote: Resolving deltas: 100% (11/11), completed with 11 local objects. To https://github.com/testingisdocumenting/znai.git e310685..900e0be master -> master Mykolas-MacBook-Pro:znai-reactjs mykola$ git push Counting objects: 33, done. Delta compression using up to 8 threads. Compressing objects: 100% (33/33), done. Writing objects: 100% (33/33), 3.34 KiB | 0 bytes/s, done. Total 33 (delta 28), reused 0 (delta 0) remote: Resolving deltas: 100% (28/28), completed with 14 local objects. To https://github.com/testingisdocumenting/znai.git 900e0be..bb9993f master -> master</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/math#latex-block</url>
    <fullTitle>Znai: Math, LaTeX Block [Snippets]</fullTitle>
    <text>
      <text>To render math you can use https://en.wikibooks.org/wiki/LaTeX/Mathematics LaTeX math expressions. Surround LaTeX expression with fenced block and specify latex as a language ```latex \forall x \in X, \quad \exists y \leq \epsilon ``` The result will be a following math expression. \forall x \in X, \quad \exists y \leq \epsilon ```latex x = \begin{cases} a &amp;\text{if } b \\ c &amp;\text{if } d \\ x &amp;\text{if } z \end{cases} ``` x = \begin{cases} a &amp;\text{if } b \\ c &amp;\text{if } d \\ x &amp;\text{if } z \end{cases}</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/math#latex-inline</url>
    <fullTitle>Znai: Math, LaTeX Inline [Snippets]</fullTitle>
    <text>
      <text>Znai also supports inline LaTeX. Use single backticks instead of three to render math expressions inline. JSON parameters are used to allow LaTeX braces to be parsed correctly. It holds that `:latex: {src: "\\frac{1}{2} &lt; \\sqrt{2}"}`. The result will be a following math expression.It holds that .</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/math#presentation-mode</url>
    <fullTitle>Znai: Math, Presentation Mode [Snippets]</fullTitle>
    <text>
      <text>In presentation mode, rendered expressions will automatically scale to make use of the screen space.</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/math#katex</url>
    <fullTitle>Znai: Math, KaTex [Snippets]</fullTitle>
    <text>
      <text>Rendering is done by using awesome https://github.com/Khan/KaTeX KaTeX library. https://github.com/Khan/KaTeX KaTeX fonts are copied to generated documentation resources.</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/jupyter-notebook#code-and-output</url>
    <fullTitle>Znai: Jupyter Notebook, Code and Output [Snippets]</fullTitle>
    <text>
      <text>Use include-jupyter to include https://jupyter.org/ Jupyter notebook inside your documentation. :include-jupyter: jupyter/simple-notebook.ipynb Note: Remember that you can define lookup paths for files like notebooks inside flow/lookup-paths lookup-paths file, so you don't have to copy and paste notebooks to your documentation directory.</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/jupyter-notebook#pandas</url>
    <fullTitle>Znai: Jupyter Notebook, Pandas [Snippets]</fullTitle>
    <text>
      <text>Markdown from your notebook will be seamlessly integrated into your current page. First level # headers will become part of Table Of Contents and part of a search unit. :include-jupyter: notebook-with-markdown-story.ipynb Note: below text is auto generated, including the Panda sectionDisplaying values using panda display Values can be displayed using standard console outputOr using library to render a html snippet</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/jupyter-notebook#two-sides</url>
    <fullTitle>Znai: Jupyter Notebook, Two Sides [Snippets]</fullTitle>
    <text>
      <text>You will learn about the layout/two-sides-pages Two Sides Layout in the Layout section. If you are are curious now for examples, jump to layout/jupyter-notebook-two-sides Jupyter Two Sides example</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/cpp#description-extraction</url>
    <fullTitle>Znai: Cpp, Description Extraction [Snippets]</fullTitle>
    <text>
      <text>In addition to snippets/snippets-manipulation snippets manipulation that is applicable to any language, Znai can extract description of methods and convert parameters into snippets/api-parameters API Parameters :include-doxygen-doc-params: utils::nested::my_func { title: "My Params" } first_param int description of first param item a item b second_param bool description of second param Head over to CPP/description-extraction CPP Description Extraction to learn more</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/cpp#auto-reference</url>
    <fullTitle>Znai: Cpp, Auto Reference [Snippets]</fullTitle>
    <text>
      <text>Znai provides plugins to automatically create reference documentation for methods and classes. :include-doxygen-member: multi_println prints a value and a new line v1 const T1 &amp; value to print v2 const T2 &amp; value to print v1 const T1 &amp; value to print v2 const T2 &amp; value to print /** * prints a value and a new line * @param v1 value to print * @param v2 value to print * @tparam T1 type of the value one to print * @tparam T2 type of the value two to print */ template&lt;typename T1, typename T2> void multi_println(const T1&amp; v1, const T2&amp; v2) { std::cout &lt;&lt; v1 &lt;&lt; ", " &lt;&lt; v2 &lt;&lt; "\n"; } Head over to CPP/auto-reference CPP Auto Reference to learn more</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/python#content-extraction</url>
    <fullTitle>Znai: Python, Content Extraction [Snippets]</fullTitle>
    <text>
      <text>In addition to snippets/snippets-manipulation snippets manipulation that is applicable to any language, Znai can extract content of methods. :include-python: python/example.py {entry: "Animal.says", bodyOnly: true} print("hello") class Animal: """ animal top level class doc string ``` code block ``` """ def says(self): """ animal **talks** `code` """ print("hello") Head over to python/content-extraction Python Content Extraction to learn more</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/python#description-extraction</url>
    <fullTitle>Znai: Python, Description Extraction [Snippets]</fullTitle>
    <text>
      <text>Znai provides plugin to extract PyDoc content. Use it to extract high level description and merge it with the rest of the documentation. Convert method parameters into snippets/api-parameters API Parameters :include-python-doc-params: python/pydoc-params.py {entry: "my_func", title: "result and parameters"} text inside my *func* doc * list one * list two Parameters ---------- label : str label to use to *render* item in the store price : fin.money.Money price associated with the **item** Returns ------- str status of the operation `OK` for good def my_func(label, price): """ text inside my *func* doc * list one * list two Parameters ---------- label : str label to use to *render* item in the store price : fin.money.Money price associated with the **item** Returns ------- str status of the operation `OK` for good """ return "OK" Head over to python/description-extraction Python Description Extraction to learn more</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/python#auto-reference</url>
    <fullTitle>Znai: Python, Auto Reference [Snippets]</fullTitle>
    <text>
      <text>Znai provides plugins to automatically create reference documentation for methods and classes. :include-python-method: fin.money.render_money render_money render money to a string returns str money represented as text amount fin.money.Money amount to print message str message to use for audit def render_money(amount: Money, message: str = "") -> str: """ render money to a string Parameters -------------- amount: amount to print message: message to use for audit Returns ------- money represented as text """ return f"{message} {amount.amount} {amount.currency}" Head over to python/auto-reference Python Auto Reference to learn more</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/java#content-extraction</url>
    <fullTitle>Znai: Java, Content Extraction [Snippets]</fullTitle>
    <text>
      <text>In addition to snippets/snippets-manipulation snippets manipulation that is applicable to any language, Znai can extract content of methods. :include-java: HelloWorld.java { entry: "sampleMethod", commentsType: "inline", bodyOnly: true } validate(); process(p2); // important comment notifyAll(p1); // very important return bestSample(); Head over to java/content-extraction Java Content Extraction to learn more</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/java#description-extraction</url>
    <fullTitle>Znai: Java, Description Extraction [Snippets]</fullTitle>
    <text>
      <text>Znai provides plugin to extract JavaDoc content. Use it to extract high level description and merge it with the rest of the documentation. Convert Enums and method parameters into snippets/api-parameters API Parameters :include-java-doc-params: HelloWorld.java { entry: "importantAction", title: "Trading Required Parameters", referencesPath: "references/javadoc-references-demo.csv" } trader Trader trader that performs action transaction Transaction transaction to perform action on Head over to java/description-extraction Java Description Extraction to learn more</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/java#auto-reference</url>
    <fullTitle>Znai: Java, Auto Reference [Snippets]</fullTitle>
    <text>
      <text>Auto reference similar to python/content-extraction Python is planned for the future releases.Create a https://github.com/testingisdocumenting/znai/issues GitHub Issue or https://github.com/testingisdocumenting/znai/discussions Discussion to help prioritize</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/groovy#method-body</url>
    <fullTitle>Znai: Groovy, Method Body [Snippets]</fullTitle>
    <text>
      <text>When you need to extract a specific method body use the include-groovy plugin.Consider the following file: class HelloWorldTest { @Test void "should calculate risk based on epsilon"() { generateStatement(price: 10, quantity: 10, epsilon: 2) calcRisk().should == 108 } @Test void "should calculate risk without quantity"() { generateStatement(price: 10, epsilon: 2) calcRisk().should == 108 } } Specify a method name to extract it from the file. :include-groovy: HelloWorldTest.groovy {entry: "should calculate risk based on epsilon", bodyOnly: true} If bodyOnly is specified, signature will be omitted. generateStatement(price: 10, quantity: 10, epsilon: 2) calcRisk().should == 108</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/groovy#multiple-bodies</url>
    <fullTitle>Znai: Groovy, Multiple Bodies [Snippets]</fullTitle>
    <text>
      <text>Pass list as entry to extract multiple method bodies markdown :include-groovy: HelloWorldTest.groovy { title: "api example", entry: ["should calculate risk based on epsilon", "should calculate risk based on epsilon"], bodyOnly: true } generateStatement(price: 10, quantity: 10, epsilon: 2) calcRisk().should == 108 generateStatement(price: 10, quantity: 10, epsilon: 2) calcRisk().should == 108 Pass entrySeparator: "&lt;separator>" to have a provided line in between entries as a separator. markdown :include-groovy: HelloWorldTest.groovy { title: "api example", entry: ["should calculate risk based on epsilon", "should calculate risk based on epsilon"], entrySeparator: "", bodyOnly: true } generateStatement(price: 10, quantity: 10, epsilon: 2) calcRisk().should == 108 generateStatement(price: 10, quantity: 10, epsilon: 2) calcRisk().should == 108</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/groovy#overloads</url>
    <fullTitle>Znai: Groovy, Overloads [Snippets]</fullTitle>
    <text>
      <text>Specify types inside brackets to select an overloaded versions of your methods.Types should appear as they do in the file, i.e., if you use the short version of a type, you need to use the short version inside the plugin. import your.company.com.util.* /* groovy docs on top */ class HelloWorld { void methodName(List&lt;String> a, Map&lt;String, Integer> b) { actionA() } void methodName(List&lt;String> a, Boolean b) { actionB() } void methodName(def a, def b) { actionC() } } :include-groovy: HelloWorld.groovy {entry: "methodName(List, Map)"} :include-groovy: HelloWorld.groovy {entry: "methodName(def,def)"} Note: Generic types are erased and spaces after commas are optional void methodName(List&lt;String> a, Map&lt;String, Integer> b) { actionA() } Note: def type remains def and not Object void methodName(def a, def b) { actionC() }</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/groovy#class-body</url>
    <fullTitle>Znai: Groovy, Class Body [Snippets]</fullTitle>
    <text>
      <text>import your.company.com.util.* /* groovy docs on top */ class HelloWorld { void methodName(List&lt;String> a, Map&lt;String, Integer> b) { actionA() } void methodName(List&lt;String> a, Boolean b) { actionB() } void methodName(def a, def b) { actionC() } } To extract class body use: :include-groovy: HelloWorld.groovy {entry: "HelloWorld"} class HelloWorld { void methodName(List&lt;String> a, Map&lt;String, Integer> b) { actionA() } void methodName(List&lt;String> a, Boolean b) { actionB() } void methodName(def a, def b) { actionC() } } Use bodyOnly to only display only the body of your class. :include-groovy: HelloWorld.groovy {entry: "HelloWorld", bodyOnly: true} void methodName(List&lt;String> a, Map&lt;String, Integer> b) { actionA() } void methodName(List&lt;String> a, Boolean b) { actionB() } void methodName(def a, def b) { actionC() }</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/markdown#single-markdown-file</url>
    <fullTitle>Znai: Markdown, Single Markdown File [Snippets]</fullTitle>
    <text>
      <text>To reuse Markdown in several places without duplication, use the include-markdown plugin. # Included Markdown This markdown, and the sub-heading above, were included using the `include-markdown` plugin. :include-markdown: markdown-dir/md-to-include.md This markdown, and the sub-heading above, were included using the include-markdown plugin.</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/markdown#optional-markdown</url>
    <fullTitle>Znai: Markdown, Optional Markdown [Snippets]</fullTitle>
    <text>
      <text>When you document an open source project you may have different instructions based on where the documentation is deployed.For example, this documentation has two versions, one deployed internally at Two Sigma and one deployed externally using GitHub Pages. Most of the documentation parts are the same, but there are differences in sections like Getting Started.We build documentation twice and the differences are handled by include-markdown 's firstAvailable parameter. :include-markdown: {firstAvailable: [ "markdown-dir/getting-started-step-internal.md", "markdown-dir/getting-started-step-external.md"]} command specific-to-external</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/markdown#partial-markdown</url>
    <fullTitle>Znai: Markdown, Partial Markdown [Snippets]</fullTitle>
    <text>
      <text>Use surroundedBy to include portion of a markdown from existing markdown file, e.g. readme.md Given an existing markdown files with markers # Section One Some text # Section Two [comment]: &lt;&gt; (marker-one) Use these parameters to setup your work environment: ``` parameter=value ``` [comment]: &lt;&gt; (marker-one) markdown :include-markdown: markdown-dir/markdown-with-markers.md {surroundedBy: "&lt;&gt; (marker-one)"} Use these parameters to setup your work environment: parameter=value</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/markdown#inlined-markdown</url>
    <fullTitle>Znai: Markdown, Inlined Markdown [Snippets]</fullTitle>
    <text>
      <text>To inline a piece of markdown use the inlined version of the plugin content `:markdown: path-to-file.md` content Plugin will inline text content into current paragraph. markdown Use the latest version `:markdown: markdown-dir/inlined.md` to get the feature. `:badge: 2.34` Use the latest version to get the feature.Use firstAvailable parameter to include first file that can be resolved markdown Use the latest version `:markdown: { firstAvailable: ["markdown-dir/inlined-alternative.md", "markdown-dir/inlined.md"]}` to get the feature. `:badge: 2.44_internal` `:badge: 2.34` Use the latest version to get the feature.</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/snippets/markdown#multiple-markdown-files</url>
    <fullTitle>Znai: Markdown, Multiple Markdown Files [Snippets]</fullTitle>
    <text>
      <text>You can also include all the Markdown files within a directory by using include-markdowns .This plugin can be used to generate release notes or an FAQ page. ### How to install Znai? To install Znai use ```cli brew install testingisdocumenting/brew/znai ``` ### How to run preview mode? To run Znai in preview mode ```cli znai --preview ``` :include-markdowns: faq-collection {sort: "ascending"} How to install Znai? To install Znai use brew install testingisdocumenting/brew/znai How to run preview mode? To run Znai in preview mode znai --preview Note: include-markdowns renders files of the specified directory based on the filename (by default in descending alphabetical order).</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/attention-signs#speed-bump</url>
    <fullTitle>Znai: Attention Signs, Speed Bump [Visuals]</fullTitle>
    <text>
      <text>People skim through documentation. You can grab users attention by using attention signs.To create an attention sign, start a paragraph with one of the predefined keywords followed by a colon. Keyword: message</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/attention-signs#note</url>
    <fullTitle>Znai: Attention Signs, Note [Visuals]</fullTitle>
    <text>
      <text>Note: It is very important to not overuse signs. Make sure each sign counts. Note: It is very important to not overuse signs. Make sure each sign counts.</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/attention-signs#warning</url>
    <fullTitle>Znai: Attention Signs, Warning [Visuals]</fullTitle>
    <text>
      <text>Warning: Bring attention to a common mistake or an often missed configuration step using a warning sign. Do not use too many warning signs. Warning: Bring attention to a common mistake or an often missed configuration step using a warning sign. Do not use too many warning signs.</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/attention-signs#question</url>
    <fullTitle>Znai: Attention Signs, Question [Visuals]</fullTitle>
    <text>
      <text>Question: Use the question sign to bring an extra attention to the main idea of a page. \ What is the point of the `attention signs`? Question: Use the question sign to bring extra attention to the main idea of a page. What is the point of the attention signs ?</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/attention-signs#exercise</url>
    <fullTitle>Znai: Attention Signs, Exercise [Visuals]</fullTitle>
    <text>
      <text>Exercise: write a hello world example in this language Exercise: write a hello world example in this language</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/attention-signs#avoid</url>
    <fullTitle>Znai: Attention Signs, Avoid [Visuals]</fullTitle>
    <text>
      <text>Avoid: using multiple versions of `ReactJS` inside one project. Avoid: using multiple versions of ReactJS inside one project.</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/attention-signs#do-not</url>
    <fullTitle>Znai: Attention Signs, Do Not [Visuals]</fullTitle>
    <text>
      <text>Don't: commit node_modules to your repository Do not: commit node_modules to your repository Don't: commit node_modules to your repositoryDo not: commit node_modules to your repository</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/attention-signs#tip</url>
    <fullTitle>Znai: Attention Signs, Tip [Visuals]</fullTitle>
    <text>
      <text>Tip: use temporary directory to generate the summary file for upload Tip: use temporary directory to generate the summary file for upload</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/attention-signs#recommendation</url>
    <fullTitle>Znai: Attention Signs, Recommendation [Visuals]</fullTitle>
    <text>
      <text>Recommendation: write automated tests for new business logic Recommendation: write automated tests for new business logic</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/attention-signs#fence-block</url>
    <fullTitle>Znai: Attention Signs, Fence Block [Visuals]</fullTitle>
    <text>
      <text>Use fence block to create an explicit attention block. markdown ```attention-note hello world ``` hello world By default, there is only icon. Use label to add text markdown ```attention-note {label: "Custom Label"} hello world ``` hello world Using block makes it easier to include other plugins inside markdown `````attention-note Use this command to setup fresh environment ```cli mycommand setup ``` ````` Use this command to setup fresh environment mycommand setup</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/attention-signs#attention-block-types</url>
    <fullTitle>Znai: Attention Signs, Attention Block Types [Visuals]</fullTitle>
    <text>
      <text>attention-&lt;type> note warning avoid question recommendation</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/images#standard-markdown</url>
    <fullTitle>Znai: Images, Standard Markdown [Visuals]</fullTitle>
    <text>
      <text>An image can be included using standard Markdown syntax. markdown ![alt text](regular-image.png) null regular-image.png alt text markdown ![alt text](castle.jpg "custom title") custom title castle.jpg alt text</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/images#extension</url>
    <fullTitle>Znai: Images, Extension [Visuals]</fullTitle>
    <text>
      <text>Znai has include-image extension to provide additional features:annotations fit scale alignment border presentation mode</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/images#title</url>
    <fullTitle>Znai: Images, Title [Visuals]</fullTitle>
    <text>
      <text>Use title to add a title to an image. :include-image: castle.jpg {title: "beautiful castle"}</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/images#anchor</url>
    <fullTitle>Znai: Images, Anchor [Visuals]</fullTitle>
    <text>
      <text>When you specify a title, hover mouse over it to see a clickable anchor.Use anchorId to override auto generated identifier. :include-image: castle.jpg {title: "beautiful castle", anchorId: "castle-image"}</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/images#border</url>
    <fullTitle>Znai: Images, Border [Visuals]</fullTitle>
    <text>
      <text>Use border: true to include a border around image. :include-image: image.png {border: true}</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/images#fit</url>
    <fullTitle>Znai: Images, Fit [Visuals]</fullTitle>
    <text>
      <text>By default image occupies all available horizontal space:Use fit parameter to fit an image to the text column width. :include-image: books.jpg {fit: true} Note: You can click on the scaled down images to display it full screen</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/images#scale</url>
    <fullTitle>Znai: Images, Scale [Visuals]</fullTitle>
    <text>
      <text>To scale image up or down use scale option, 1 is default, 0.5 is half an image size. :include-image: books.jpg {scale: 0.3} Note: You can click on the scaled down images to display it full screen</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/images#align</url>
    <fullTitle>Znai: Images, Align [Visuals]</fullTitle>
    <text>
      <text>Use align option to align images left or right. :include-image: books.jpg {align: "left", scale: 0.3} :include-image: books.jpg {align: "right", scale: 0.3}</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/images#collapse</url>
    <fullTitle>Znai: Images, Collapse [Visuals]</fullTitle>
    <text>
      <text>Use collapsed: true|false to make image collapsible. Note: title option is required markdown :include-image: books.jpg { fit: true, title: "books", anchorId: "my-books", collapsed: true }</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/images#no-gap</url>
    <fullTitle>Znai: Images, No Gap [Visuals]</fullTitle>
    <text>
      <text>Use noGap: true to remove top/bottom margins when there are multiple images in a row. markdown :include-image: books.jpg { fit: true, title: "books", collapsed: true, noGap: true } :include-image: castle.jpg { fit: true, title: "castle", collapsed: false }</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/images#external-image</url>
    <fullTitle>Znai: Images, External Image [Visuals]</fullTitle>
    <text>
      <text>Pass external url in place of image to render image from a remote site ![text](https://external-url) :include-image: https://external-url { align: "left" } Note: Pass parameter to validate image urls</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/images#mobile-and-desktop-only</url>
    <fullTitle>Znai: Images, Mobile And Desktop Only [Visuals]</fullTitle>
    <text>
      <text>Use mobileOnly to only render an image in mobile screen size. Use desktopOnly to only render an image in desktop screen size. :include-image: small-book.png {title: "only visible in mobile screen size", mobileOnly: true} :include-image: books.jpg {title: "only visible in desktop screen size", desktopOnly: true, fit: true}</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/image-annotations#badges</url>
    <fullTitle>Znai: Image Annotations, Badges [Visuals]</fullTitle>
    <text>
      <text>Use image fence plugin to display Image and manually provide badge coordinates ```image testingisdocumenting.png {scale: 0.5} 840,600 1680,1400 ``` Note: Color of badges change based on the background color</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/image-annotations#manual-coordinates</url>
    <fullTitle>Znai: Image Annotations, Manual Coordinates [Visuals]</fullTitle>
    <text>
      <text>Hover mouse over image during introduction/getting-started#preview-mode Preview Mode to display coordinates under the cursor. Use the displayed coordinates to update the position.</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/image-annotations#badge-textual-description</url>
    <fullTitle>Znai: Image Annotations, Badge Textual Description [Visuals]</fullTitle>
    <text>
      <text>Put ordered list right before or after an annotated image to associate text with the badges. markdown 1. Use automated testing to exercise happy paths and capture test artifacts 2. Use captured test artifacts to supercharge your documentation ```image testingisdocumenting.png {scale: 0.5} 840,600 1680,1400 ``` Note: Hover over image annotations to display automatic tooltip. Hover over an item text to highlight the annotation on the image.Use automated testing to exercise happy paths and capture test artifacts Use captured test artifacts to supercharge your documentation</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/image-annotations#pixel-ratio</url>
    <fullTitle>Znai: Image Annotations, Pixel Ratio [Visuals]</fullTitle>
    <text>
      <text>Use pixelRatio to display HiDPI images and use logical coordinates for the annotations ```image testingisdocumenting.png {pixelRatio: 2} 420,300 840,700 ```</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/image-annotations#rectangles-and-arrows</url>
    <fullTitle>Znai: Image Annotations, Rectangles And Arrows [Visuals]</fullTitle>
    <text>
      <text>Use rect and arrow as first column value to render arrow or rectangle annotation ```image testingisdocumenting.png {pixelRatio: 2} rect,60,110,420,430 arrow,485,810,310,474 ``` Add a text block after coordinates to provide tooltip data. Markdown is supported. ```image testingisdocumenting.png {pixelRatio: 2} rect,60,110,420,430,Note: zone description arrow,485,810,310,474,destination **description** ``` Note: Hover over image annotations to display automatic tooltip.</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/image-annotations#annotations-file</url>
    <fullTitle>Znai: Image Annotations, Annotations File [Visuals]</fullTitle>
    <text>
      <text>:include-image: testingisdocumenting.png { annotationsPath: "testingisdocumenting.csv", pixelRatio: 2, } rect,60,110,420,430,Note: zone description arrow,485,810,310,474,destination **description** include-image also supports JSON file format</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/image-annotations#annotations-path-shortcut</url>
    <fullTitle>Znai: Image Annotations, Annotations Path Shortcut [Visuals]</fullTitle>
    <text>
      <text>You don't need to specify annotations path, if annotations file matches file name and path of the image and has json or csv extension.Add annotate: true to automatically use matching annotations file :include-image: testingisdocumenting.png { annotate: true, pixelRatio: 2, }</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/image-annotations#integration-with-testing</url>
    <fullTitle>Znai: Image Annotations, Integration With Testing [Visuals]</fullTitle>
    <text>
      <text>Use UI testing frameworks to automatically generate annotations file and capture screenshot.For example https://github.com/testingisdocumenting/webtau WebTau automatically generates an annotations file in addition to capturing a screenshot. package webtauexamples import static org.testingisdocumenting.webtau.WebTauGroovyDsl.* def homeSearchInput = $('input[id*="search"]') def resultSearchInput = $("#search_form_input") def result = $('article[data-testid="result"]') scenario("capture screenshot") { browser.open("https://duckduckgo.com/") homeSearchInput.waitToBe visible homeSearchInput.setValue("testing is documenting\n") result.waitTo visible browser.doc.withAnnotations(resultSearchInput, result) .capture("duckduckgo-search") } :include-image: doc-artifacts/duckduckgo-search.png {annotate: true} Type question you want to be answered anonymously Scan through results and pick the most relevant one Note: https://github.com/testingisdocumenting/webtau WebTau captures additional data such as pixelRatio</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/image-annotations#presentation-mode</url>
    <fullTitle>Znai: Image Annotations, Presentation Mode [Visuals]</fullTitle>
    <text>
      <text>Annotated images automatically participate in presentation mode. Annotations will appear one by one.</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/cards#image-and-title</url>
    <fullTitle>Znai: Cards, Image And Title [Visuals]</fullTitle>
    <text>
      <text>Use card fenced block plugin to render a card. markdown ```card books.jpg {title: "My Card"} Markdown content of the card goes here * item one * item two * item three ``` Markdown content of the card goes hereitem one item two item three Note: Card scales down large image to fit</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/cards#image-height-and-background</url>
    <fullTitle>Znai: Cards, Image Height And Background [Visuals]</fullTitle>
    <text>
      <text>When you use icon like images, e.g. SVGs, then they will take all the horizontal available space, and it may not be ideal.Use imageHeight to force image height. Use imageBackground to specify a https://www.w3schools.com/css/css3_gradients.asp background color/gradient. markdown ```card diamond.svg {title: "My Card", imageHeight: 120, imageBackground: "linear-gradient(to right, rgb(29 41 41), rgb(145, 152, 229))"} Markdown content of the card goes here * item one * item two * item three ``` Markdown content of the card goes hereitem one item two item three</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/cards#multiple-columns</url>
    <fullTitle>Znai: Cards, Multiple Columns [Visuals]</fullTitle>
    <text>
      <text>Use layout/columns Colums to arrange cards side by side Markdown content goes here class JsClass { constructor() { usefulAction() } } export default JsClass Markdown content of the card goes hereitem one item two item three Easy to use API firstName String description with markdown support score Integer another description line with markdown support markdown ```````columns left: ```card diamond.svg {title: "Card Title", imageHeight: 120, imageBackground: "linear-gradient(to right, rgb(29 41 41), rgb(145, 152, 229))"} Markdown content goes here :include-file: snippets/file-name.js ``` middle: ```card small-book.png {title: "Book", imageHeight: 120} Markdown content of the card goes here * item one * item two * item three ``` right: `````card star.svg {title: "API for the Win", imageHeight: 120, imageBackground: "linear-gradient(to right, rgb(154 128 145 / 0%), rgb(255 206 206))"} Easy to use API ```api-parameters firstName, String, description with *markdown* support score, Integer, another description line with *markdown* support ``` ````` ```````` Note: Card plugin is designed to work with snippets/external-code-snippets code snippets, layout/tables Tables and snippets/api-parameters API Parameters by reducing spacing and integrating borders List Item One List Item Two column A column B hello world of cards</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/cards#links</url>
    <fullTitle>Znai: Cards, Links [Visuals]</fullTitle>
    <text>
      <text>Card plugin automatically converts links at the end of the fenced block content into dedicated card links. Markdown content goes here class JsClass { constructor() { usefulAction() } } export default JsClass snippets/external-code-snippets Learn More markdown ```card diamond.svg {title: "Card Title", imageHeight: 120, imageBackground: "linear-gradient(to right, rgb(29 41 41), rgb(145, 152, 229))"} Markdown content goes here :include-file: snippets/file-name.js [Learn More](snippets/external-code-snippets) ```</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/charts#pie</url>
    <fullTitle>Znai: Charts, Pie [Visuals]</fullTitle>
    <text>
      <text>To build a pie chart use: :include-piechart: charts/genres.csv genre, preference RPG, 75 Action, 50 RTS, 40 FPS, 50</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/charts#bar</url>
    <fullTitle>Znai: Charts, Bar [Visuals]</fullTitle>
    <text>
      <text>To build a bar chart use: :include-barchart: charts/genres.csv genre, preference RPG, 75 Action, 50 RTS, 40 FPS, 50 Add more columns to CSV data to use multiple bars per X axis tick :include-barchart: charts/game-activities.csv game, walking, fighting, reading Oblivion, 100, 100, 20 Elden Ring, 110, 110, 5 Persona 5, 20, 30, 50 Divinity, 30, 30, 10 Use stack: true to render multiple bars stacked :include-barchart: charts/game-activities.csv {stack: true} Use horizontal: true and height parameter to change render direction :include-barchart: charts/game-activities.csv {stack: true, horizontal: true, height: 250}</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/charts#line</url>
    <fullTitle>Znai: Charts, Line [Visuals]</fullTitle>
    <text>
      <text>To build a line chart use: :include-linechart: charts/genres.csv genre, preference RPG, 75 Action, 50 RTS, 40 FPS, 50 Use multiple CSV columns to add more lines :include-linechart: charts/daily-genres.csv day, RPG, RTS, FPS Monday, 100, 10, 0 Tuesday, 50, 50, 20 Wednesday, 10, 30, 50 Thursday, 5, 5, 100 Friday, 0, 100, 10 Use numbers in first column to have a regular X, Y plots :include-linechart: charts/competitors.csv x, company one, company two 10, 100, 150 15.5, 110, 145 30, 120, 130 40, 110, 145 50, 115, 100</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/charts#time-series</url>
    <fullTitle>Znai: Charts, Time Series [Visuals]</fullTitle>
    <text>
      <text>Use time: true to treat X as time series day, RPG 2022-08-01, 100 2022-08-04, 50 2022-08-05, 10 2022-08-08, 5 2022-09-12, 22 :include-linechart: charts/time-series.csv {time: true}</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/charts#legend</url>
    <fullTitle>Znai: Charts, Legend [Visuals]</fullTitle>
    <text>
      <text>Use legend: true to add legend to a chart :include-linechart: charts/daily-genres.csv {legend: true}</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/charts#wide-mode</url>
    <fullTitle>Znai: Charts, Wide Mode [Visuals]</fullTitle>
    <text>
      <text>Use wide: true to use available horizontal space :include-linechart: charts/daily-genres.csv {wide: true} Use in combination with height to fit larger charts :include-linechart: charts/daily-genres.csv {wide: true, height: 800}</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/charts#inlined-data</url>
    <fullTitle>Znai: Charts, Inlined Data [Visuals]</fullTitle>
    <text>
      <text>Use fence block plugin to inline chart data into markdown ```piechart genre, preference RPG, 75 Action, 50 RTS, 40 FPS, 50 ``` ```linechart {legend: true} day, RPG, RTS, FPS Monday, 100, 10, 0 Tuesday, 50, 50, 20 Wednesday, 10, 30, 50 Thursday, 5, 5, 100 Friday, 0, 100, 10 ``` ```barchart genre, preference RPG, 75 Action, 50 RTS, 40 FPS, 50 ```</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/charts#presentation</url>
    <fullTitle>Znai: Charts, Presentation [Visuals]</fullTitle>
    <text>
      <text>Charts automatically participate in slides. Each chart becomes an individual slide.Use breakpoint to add extra slides transitions. :include-linechart: charts/competitors.csv { legend: true, breakpoint: [17, 42] } To try it, press on icon next to the Presentation header :include-piechart: charts/genres.csv {breakpoint: "Action"} Use all as breakpoint value to create a slide for each textual entry :include-barchart: charts/genres.csv { legend: true, breakpoint: "all" }</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/charts#echarts</url>
    <fullTitle>Znai: Charts, ECharts [Visuals]</fullTitle>
    <text>
      <text>Znai uses the beautiful and functional https://echarts.apache.org/ EChart library to render charts.</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/mermaid-diagrams#fenced-block</url>
    <fullTitle>Znai: Mermaid Diagrams, Fenced Block [Visuals]</fullTitle>
    <text>
      <text>Use https://mermaid-js.github.io/mermaid/#/ Mermaid to create diagrams using text and code, written in a Markdown style. Surround Mermaid expressions with a fenced block and specify mermaid as a language ```mermaid flowchart TD A[Start] --> B{Is it?} B -- Yes --> C[OK] C --> D[Rethink] D --> B B -- No ----> E[End] ``` The result will be a diagram. flowchart TD A[Start] --> B{Is it?} B -- Yes --> C[OK] C --> D[Rethink] D --> B B -- No ----> E[End] In presentation mode, rendered expressions will automatically scale to make use of the screen space.Note: Rendering is done by using https://mermaid-js.github.io/mermaid/#/ Mermaid library.</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/mermaid-diagrams#external-file</url>
    <fullTitle>Znai: Mermaid Diagrams, External File [Visuals]</fullTitle>
    <text>
      <text>Use include plugin to render a Mermaid diagram from a file. :include-mermaid: mermaid/class-diagram.mmd classDiagram Animal &lt;|-- Duck Animal &lt;|-- Fish Animal &lt;|-- Zebra Animal : +int age Animal : +String gender Animal: +isMammal() Animal: +mate() class Duck{ +String beakColor +swim() +quack() } class Fish{ -int sizeInFeet -canEat() } class Zebra{ +bool is_wild +run() } classDiagram Animal &lt;|-- Duck Animal &lt;|-- Fish Animal &lt;|-- Zebra Animal : +int age Animal : +String gender Animal: +isMammal() Animal: +mate() class Duck{ +String beakColor +swim() +quack() } class Fish{ -int sizeInFeet -canEat() } class Zebra{ +bool is_wild +run() }</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/mermaid-diagrams#wide-mode</url>
    <fullTitle>Znai: Mermaid Diagrams, Wide Mode [Visuals]</fullTitle>
    <text>
      <text>Use wide: true to use as much horizontal space as required and available. ```mermaid {wide: true} sequenceDiagram par Alice to Bob Alice->>Bob: Go help John and Alice to John Alice->>John: I want this done today par John to Charlie John->>Charlie: Can we do this today? and John to Diana John->>Diana: Can you help us today? and Alice to Carl Alice->>Carl: I also want this done today end end ``` or :include-mermaid: mermaid/sequence-diagram.mmd { wide: true } sequenceDiagram par Alice to Bob Alice->>Bob: Go help John and Alice to John Alice->>John: I want this done today par John to Charlie John->>Charlie: Can we do this today? and John to Diana John->>Diana: Can you help us today? and Alice to Carl Alice->>Carl: I also want this done today end end</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/SVG#retina-displays</url>
    <fullTitle>Znai: SVG, Retina Displays [Visuals]</fullTitle>
    <text>
      <text>To have crisp documentation images on high DPI displays use SVG images. :include-svg: with-groups.svg</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/SVG#ids-to-reveal</url>
    <fullTitle>Znai: SVG, Ids To Reveal [Visuals]</fullTitle>
    <text>
      <text>If you have groups that you want to display while hiding everything else, pass the IDs to the idsToReveal property. :include-svg: with-groups.svg {idsToReveal: ["partA", "partB"]} In presentation mode, groups will be displayed one at a time in the order specified.To force all specified parts to appear at once add this before (either in the same section, or at the start of a document). :include-meta: {allAtOnce: true} This SVG image is taken and modified from https://www.shareicon.net/pyramid-piramid-draw-stock-877888 https://www.shareicon.net/pyramid-piramid-draw-stock-877888 &lt;?xml version="1.0" ?> &lt;svg version="1.1" viewBox="0 0 512 512" width="256" height="256" xml:space="preserve" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"> &lt;style type="text/css"> .st0{fill:#5CB8CD;} .st1{fill:#FB8A52;} .st2{fill:#152D39;} .st3{fill:#E8E8E8;} &lt;/style> &lt;g id="partA"> &lt;path class="st2" d="M109.4,397.7c-0.8-3.8-0.4-7.9,1.4-11.8l127.9-279.4c2.3-5.1,6.4-8.5,11-10.1V6 c-4.6,1.6-8.6,4.9-11,10.1L52.1,423.6c-1.9,4.1-2.2,8.3-1.3,12.2L109.4,397.7z" /> &lt;path class="st2" d="M160.4,325.4c-43.8,0-79.4-35.6-79.4-79.4s35.6-79.4,79.4-79.4s79.4,35.6,79.4,79.4 S204.2,325.4,160.4,325.4z" /> &lt;circle class="st3" cx="160.4" cy="246" r="68.1"/> &lt;path class="st2" d="M168.2,253.3h-11.3l-2.7,7.8H150l10.9-30.1h3.5l10.6,30.1h-4.2L168.2,253.3z M158,249.9h9l-4.4-12.9h-0.1 L158,249.9z"/> &lt;/g> &lt;g id="partC"> &lt;path class="st1" d="M394.8,409.5c-3,2.1-6.8,3.4-10.9,3.4H128.1c-4.7,0-8.9-1.6-12.1-4.3l-58.3,37.9 c3.2,2.5,7.2,4,11.8,4h373.1c4,0,7.6-1.2,10.5-3.2L394.8,409.5z" /> &lt;path class="st1" d="M262.4,506c-43.8,0-79.4-35.6-79.4-79.4s35.6-79.4,79.4-79.4s79.4,35.6,79.4,79.4 S306.1,506,262.4,506z" /> &lt;circle class="st3" cx="262.4" cy="426.6" id="XMLID_7_" r="68.1"/> &lt;path class="st1" d="M274.8,432.6l0,0.1c0.1,3.1-1,5.7-3.3,7.8c-2.3,2.1-5.2,3.2-8.9,3.2c-3.8,0-6.8-1.3-9.2-4 c-2.4-2.7-3.6-6.1-3.6-10.2v-5.9c0-4.1,1.2-7.5,3.6-10.2c2.4-2.7,5.4-4,9.2-4c3.8,0,6.8,1,9,3c2.2,2,3.3,4.7,3.2,8l0,0.1h-4.3 c0-2.3-0.7-4.2-2.1-5.5c-1.4-1.4-3.3-2-5.8-2c-2.5,0-4.5,1-6,3c-1.5,2-2.2,4.5-2.2,7.5v6c0,3,0.7,5.6,2.2,7.6c1.5,2,3.5,3,6,3 c2.5,0,4.4-0.7,5.8-2c1.4-1.3,2.1-3.2,2.1-5.6H274.8z"/> &lt;/g> &lt;g id="partB"> &lt;path class="st0" d="M262.4,96.5c4.6,1.6,8.6,4.9,11,10.1l127.9,279.4c2,4.4,2.2,9.1,1,13.2l58.5,38.1 c1.4-4.3,1.2-9.1-0.9-13.6L273.4,16.1c-2.3-5.1-6.4-8.5-11-10.1V96.5z"/> &lt;path class="st0" d="M364.3,325.4c-43.8,0-79.4-35.6-79.4-79.4s35.6-79.4,79.4-79.4s79.4,35.6,79.4,79.4 S408.1,325.4,364.3,325.4z" /> &lt;circle class="st3" cx="364.3" cy="246" id="XMLID_9_" r="68.1"/> &lt;path class="st0" d="M352.7,263.2v-34.4h11.2c3.6,0,6.4,0.8,8.4,2.3c2,1.6,3,3.9,3,7c0,1.5-0.5,2.8-1.4,4c-0.9,1.2-2.1,2.1-3.6,2.7 c2.3,0.3,4,1.3,5.3,2.9c1.3,1.6,2,3.6,2,5.8c0,3.1-1,5.6-3.1,7.2c-2,1.7-4.8,2.5-8.3,2.5H352.7z M357.3,243.4h7.5 c1.7,0,3.1-0.5,4.2-1.4c1.1-1,1.6-2.3,1.6-4c0-1.9-0.6-3.2-1.8-4.2c-1.2-0.9-2.9-1.4-5.1-1.4h-6.6V243.4z M357.3,247.1v12.5h9 c2.1,0,3.8-0.5,4.9-1.6c1.2-1,1.8-2.5,1.8-4.5c0-1.9-0.6-3.4-1.8-4.6c-1.2-1.2-2.8-1.8-4.8-1.9h-0.3H357.3z"/> &lt;/g> &lt;/svg></text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/SVG#actual-size</url>
    <fullTitle>Znai: SVG, Actual Size [Visuals]</fullTitle>
    <text>
      <text>SVGs may have additional white space around the content and have width and height property specified inside. Use actualSize: true if you want to use the actual content only and effectively crop the white space. width and height will be overridden with the cropped size. :include-svg: with-groups.svg {idsToReveal: ["partC"], actualSize: true} Without actualSize there would be a gap created by hiding other parts.</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/SVG#scale</url>
    <fullTitle>Znai: SVG, Scale [Visuals]</fullTitle>
    <text>
      <text>Use scale: scaleFactor to change the size of the SVG provided :include-svg: with-groups.svg {idsToReveal: ["partC"], actualSize: true, scale: 0.2}</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/icons#feather-icons</url>
    <fullTitle>Znai: Icons, Feather Icons [Visuals]</fullTitle>
    <text>
      <text>Znai has integration with https://feathericons.com/ Feather Icons. Icons can be included using the inlined code plugin. `:icon: cloud` The result will appear in-lined in the current text Head over to https://feathericons.com/ https://feathericons.com/ to find the icon id.</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/icons#bullet-points</url>
    <fullTitle>Znai: Icons, Bullet Points [Visuals]</fullTitle>
    <text>
      <text>Icons can also be used as bullet points replacement: * `:icon: time` Time is important * `:icon: settings` Setup must be easy Time is important Setup must be easy</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/icons#colors</url>
    <fullTitle>Znai: Icons, Colors [Visuals]</fullTitle>
    <text>
      <text>Stroke Use stroke parameter to set outline color. * `:icon: time {stroke: 'green'}` stroke: `green` * `:icon: cloud {stroke: 'blue'}` stroke: `blue` * `:icon: settings {stroke: 'yellow'}` stroke: `yellow` * `:icon: x-octagon {stroke: 'red'}` stroke: `red` stroke: green stroke: blue stroke: yellow stroke: red Fill Use stroke parameter to set fill color. fill: red fill: red , stroke: 'black' Note: default stroke color is a text color, which may not look good in Dark theme. Use black color explicitly if you want the stroke color to be black in both Light and Dark themes.</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/icons#inside-tables</url>
    <fullTitle>Znai: Icons, Inside Tables [Visuals]</fullTitle>
    <text>
      <text>Znai provides a shortcut to use icons inside layout/tables Tables. Feature Name, V1, V2 featureA, +, + featureB, -, + +, `:icon: check {stroke: "green"}` -, `:icon: slash {stroke: "red"}` :include-table: table.csv {mappingPath: "mapping.csv"} Feature Name V1 V2 featureA `:icon: check {stroke: "green"}` `:icon: check {stroke: "green"}` featureB `:icon: slash {stroke: "red"}` `:icon: check {stroke: "green"}`</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/headings#heading-types</url>
    <fullTitle>Znai: Headings, Heading Types [Visuals]</fullTitle>
    <text>
      <text>Use {style: "api"} at the end of heading title to change style of the heading to API one: monospace and different subheading styles.Use it to hand-craft reference documentation # Heading API Type {style: "api", badge: "class"} ## Heading API Type {style: "api"} ### Heading API Type {style: "api"} #### Heading API Type {style: "api"} ##### Heading API Type {style: "api"} ###### Heading API Type {style: "api"}</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/headings#heading-api-type</url>
    <fullTitle>Znai: Headings, Heading API Type [Visuals]</fullTitle>
    <text>
      <text>Heading API Type Heading API Type Heading API Type Heading API Type Heading API Type</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/text-badge#part-of-text</url>
    <fullTitle>Znai: Text Badge, Part Of Text [Visuals]</fullTitle>
    <text>
      <text>Use badge inlined code plugin to render a badge like this to render a badge like this `:badge: v3.12`</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/text-badge#part-of-heading</url>
    <fullTitle>Znai: Text Badge, Part Of Heading [Visuals]</fullTitle>
    <text>
      <text>To add a badge to a header use # Part Of Heading {badge: "v3.12"}</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/spoilers#hidden-content</url>
    <fullTitle>Znai: Spoilers, Hidden Content [Visuals]</fullTitle>
    <text>
      <text>To hide content use the spoiler fence plugin ````spoiler Information you don't want users to see right away goes here. Can use all the markdown inside 1. item A 2. item B ``` let list = [1, 2, 3] let value = 0 ``` ```` Information you don't want users to see right away goes here. Can use all the markdown insideitem A item B let list = [1, 2, 3] let value = 0 Note: Four backticks were used instead of the usual three. This is done so one fence block can include another block (code snippet) without confusion. It can be any number of backticks greater than three.</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/spoilers#hidden-content-title</url>
    <fullTitle>Znai: Spoilers, Hidden Content Title [Visuals]</fullTitle>
    <text>
      <text>Use the title parameter to set a custom title for your spoiler. ```spoiler {title: "Are you ready to see what's inside?"} ... ``` Line One Line Two Line Three</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/keyboard-shortcuts#inlined-keyboard-shorcuts</url>
    <fullTitle>Znai: Keyboard Shortcuts, Inlined Keyboard Shorcuts [Visuals]</fullTitle>
    <text>
      <text>Keyboard shortcuts can be included using the inlined code plugin. To open a configuration screen press `:kbd: F4`. To open a configuration screen press .</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/keyboard-shortcuts#multiple-keys</url>
    <fullTitle>Znai: Keyboard Shortcuts, Multiple Keys [Visuals]</fullTitle>
    <text>
      <text>To provide multiple keys, simply separate them with a space. `:kbd: Alt Ctrl F7`</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/smart-bullet-points#types</url>
    <fullTitle>Znai: Smart Bullet Points, Types [Visuals]</fullTitle>
    <text>
      <text>Bullet points are an essential tool in the presentation of information. Frequent use of bullet points however may make documentation and presentation boring.You can change the way bullet points are rendered by using the meta plugin. :include-meta: {bulletListType: "BulletsListType"} * Testing * Design * Code Review * Documentation</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/smart-bullet-points#left-right-timeline</url>
    <fullTitle>Znai: Smart Bullet Points, Left Right Timeline [Visuals]</fullTitle>
    <text>
      <text>Use LeftRightTimeLine to outline your flow. This also splits related things by moving odd points to the left and even to the right. :include-meta: {bulletListType: "LeftRightTimeLine"} * Testing * Design * Code Review * Documentation Testing Design Code Review Documentation</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/smart-bullet-points#venn</url>
    <fullTitle>Znai: Smart Bullet Points, Venn [Visuals]</fullTitle>
    <text>
      <text>Use Venn to display overlapping relationships.Velocity Volume Variety</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/smart-bullet-points#steps</url>
    <fullTitle>Znai: Smart Bullet Points, Steps [Visuals]</fullTitle>
    <text>
      <text>Use Steps to outline a procedure.Install IDEA Learn Java Learn Machine Learning Use differentColors: true to use distinct colors for each step :include-meta: {bulletListType: "Steps", differentColors: true} Install IDEA Learn Java Learn Machine Learning Use align: "left" to align steps to the left :include-meta: {bulletListType: "Steps", differentColors: true, align: "left"} Install IDEA Learn Java Learn Machine Learning</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/smart-bullet-points#presentation-only</url>
    <fullTitle>Znai: Smart Bullet Points, Presentation Only [Visuals]</fullTitle>
    <text>
      <text>If you want to change bullets type only for presentation use: :include-meta: {presentationBulletListType: "BulletsListType"}</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/smart-bullet-points#horizontal-stripes</url>
    <fullTitle>Znai: Smart Bullet Points, Horizontal Stripes [Visuals]</fullTitle>
    <text>
      <text>The following bullet points will be rendered as horizontal striped, but only in presentation mode. :include-meta: {presentationBulletListType: "HorizontalStripes"} Lessons Learned Future Plans Backup Strategy</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/flow-diagrams#nodes-and-edges</url>
    <fullTitle>Znai: Flow Diagrams, Nodes and Edges [Visuals]</fullTitle>
    <text>
      <text>Specify a JSON file to define a flow chart. { "nodes": [ { "id": "n1", "label": "input one" }, { "id": "n2", "label": "input two" }, { "id": "n3", "label": "processor" }, { "id": "n4", "label": "output one" }, { "id": "n5", "label": "output two" }, { "id": "n6", "label": "output three" } ], "edges": [ ["n1", "n3"], ["n2", "n3"], ["n3", "n4"], ["n3", "n5"], ["n3", "n6"] ] } At the minimum edges must be provided. :include-flow-chart: simple-dag.json</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/flow-diagrams#multiline-labels</url>
    <fullTitle>Znai: Flow Diagrams, Multiline Labels [Visuals]</fullTitle>
    <text>
      <text>Use \n to split your label into multiple lines. { "nodes": [ { "id": "n1", "label": "input\none" }, { "id": "n2", "label": "output\ntwo" } ], "edges": [ ["n1", "n2"] ] }</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/flow-diagrams#nodes-size</url>
    <fullTitle>Znai: Flow Diagrams, Nodes Size [Visuals]</fullTitle>
    <text>
      <text>Add config section to specify a common size for all the nodesNote: Size unit is not based on pixels. It is sized in inches (assuming correct DPI). It is the size units used by https://graphviz.gitlab.io/ Graphviz)Use width and height property on a node itself to control individual nodes size:</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/flow-diagrams#highlight</url>
    <fullTitle>Znai: Flow Diagrams, Highlight [Visuals]</fullTitle>
    <text>
      <text>{ "nodes": [ { "id": "n1", "label": "label 1" }, { "id": "n2", "label": "label 2", "highlight": true }, { "id": "n3", "label": "label 3" } ], "edges": [ ["n1", "n2"], ["n2", "n3"], ["n1", "n3"] ] } Use highlight to highlight a node.Or use highlight property of a flow-chart include plugin. :include-flow-chart: simple-dag.json {highlight: "n3"} Note: To highlight more than one element use {highlight: ["n3", "n4"]}</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/flow-diagrams#color-groups</url>
    <fullTitle>Znai: Flow Diagrams, Color Groups [Visuals]</fullTitle>
    <text>
      <text>Use colorGroup to assign a color group to a node. There are four color groups out of the box: a (default), b , c , d . { "nodes": [ { "id": "n1", "label": "input one" }, { "id": "n2", "label": "input two" }, { "id": "n3", "label": "processor", "colorGroup": "b" }, { "id": "n4", "label": "output one", "colorGroup": "c" }, { "id": "n5", "label": "output two", "colorGroup": "c" }, { "id": "n6", "label": "output three", "colorGroup": "d" } ], "edges": [ ["n1", "n3"], ["n2", "n3"], ["n3", "n4"], ["n3", "n5"], ["n3", "n6"] ] }</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/flow-diagrams#shapes</url>
    <fullTitle>Znai: Flow Diagrams, Shapes [Visuals]</fullTitle>
    <text>
      <text>Use shape to assign one of the predefined shapes. { "nodes": [ { "id": "researcher", "label": "researcher", "shape": "actor" }, { "id": "db", "label": "two", "shape": "database" }, { "id": "another-db", "label": "three input", "shape": "database-bottom-label" }, { "id": "processor", "label": "processor", "colorGroup": "b" }, { "id": "outcome", "colorGroup": "c", "shape": "world" }, { "id": "config", "label": "config file", "colorGroup": "b", "shape": "document" } ], "edges": [ ["researcher", "processor"], ["researcher", "config"], ["db", "processor"], ["another-db", "processor"], ["config", "outcome"], ["processor", "outcome"] ] }</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/flow-diagrams#legend</url>
    <fullTitle>Znai: Flow Diagrams, Legend [Visuals]</fullTitle>
    <text>
      <text>Use include-diagram-legend to add a legend to your diagram. Optionally add clickableNodes: true to insert a message that the nodes are clickable (in case you use urls). :include-diagram-legend: {a: "inputs", b: "optimization process", c: "outcome", d: "unknown", clickableNodes: true} :include-flow-chart: flow-diagrams/simple-dag-colors.json inputs optimization process outcome unknown</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/flow-diagrams#presentation</url>
    <fullTitle>Znai: Flow Diagrams, Presentation [Visuals]</fullTitle>
    <text>
      <text>In presentation mode nodes will be highlighted one at a time.To force all highlights to appear at once add this before (either in the same section, or at the start of a document). :include-meta: {allAtOnce: true}</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/flow-diagrams#vertical-layout</url>
    <fullTitle>Znai: Flow Diagrams, Vertical Layout [Visuals]</fullTitle>
    <text>
      <text>To switch layout from horizontal to vertical use vertical: true .</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/flow-diagrams#layout-types</url>
    <fullTitle>Znai: Flow Diagrams, Layout Types [Visuals]</fullTitle>
    <text>
      <text>Use layout to specify a different underlying layout engine. Only dot (default) and neato is supported at the moment. :include-flow-chart: simple-dag.json {layout: "neato"} https://www.graphviz.org/pdf/neatoguide.pdf Neato layout guide from Graphviz</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/flow-diagrams#links</url>
    <fullTitle>Znai: Flow Diagrams, Links [Visuals]</fullTitle>
    <text>
      <text>To attach links to nodes use url property.Combine links and highlights to create a sub navigation for your product. { "nodes": [ { "id": "n1", "label": "No Link" }, { "id": "n2", "label": "Link To Java", "url": "java/content-extraction" }, { "id": "n3", "label": "Link to External", "url": "http://commonmark.org" } ], "edges": [ ["n1", "n2"], ["n3", "n2"] ] }</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/flow-diagrams#reusable-nodes</url>
    <fullTitle>Znai: Flow Diagrams, Reusable Nodes [Visuals]</fullTitle>
    <text>
      <text>Move node definitions to a one or more separate files if you use them across multiple diagrams. { "edges": [ ["a1", "a2"], ["b1", "b2"], ["b1", "a2"] ] } [ { "id": "a1", "label": "Label A 1" }, { "id": "a2", "label": "Label A 2" }, { "id": "a3", "label": "Label A 3" } ] [ { "id": "b1", "label": "Label B 1" }, { "id": "b2", "label": "Label B 2" }, { "id": "b3", "label": "Label B 3" } ] :include-flow-chart: flow-diagrams/graph-using-lib.json {nodeLibPath: "nodes/set-a.json"} :include-flow-chart: flow-diagrams/graph-using-lib.json {nodeLibPath: ["nodes/set-a.json", "nodes/set-b.json"]}</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/graphviz-diagrams#fenced-block</url>
    <fullTitle>Znai: Graphviz Diagrams, Fenced Block [Visuals]</fullTitle>
    <text>
      <text>Surround https://graphviz.org/ Graphviz expression with graphviz fenced block to render diagrams ```graphviz digraph { a -> b; b -> c; d -> b; b -> e; } ```</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/graphviz-diagrams#external-file</url>
    <fullTitle>Znai: Graphviz Diagrams, External File [Visuals]</fullTitle>
    <text>
      <text>Use include plugin to render a diagram from a file :include-graphviz: graphviz.dot digraph { a -> b; b -> c; d -> b; b -> e; }</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/graphviz-diagrams#setup-requirements</url>
    <fullTitle>Znai: Graphviz Diagrams, Setup Requirements [Visuals]</fullTitle>
    <text>
      <text>Znai renders https://graphviz.org/ Graphviz diagrams at documentation build time. For it to work dot executable must be present in PATH during documentation generation process.To override use -Ddot.bin Java system property to specify an alternative location.</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/PlantUml#in-place</url>
    <fullTitle>Znai: PlantUml, In Place [Visuals]</fullTitle>
    <text>
      <text>https://plantuml.com/sequence-diagram PlantUml is a text-based way of drawing many kinds of diagrams.</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/PlantUml#external-file</url>
    <fullTitle>Znai: PlantUml, External File [Visuals]</fullTitle>
    <text>
      <text>If your diagram is stored in a separate file, use :include-plantuml: &lt;path> :include-plantuml: demo.plantuml @startuml package "Some Group" { HTTP - [First Component] [Another Component] } node "Other Groups" { FTP - [Second Component] [First Component] --> FTP } cloud { [Example 1] } database "MySql" { folder "This is my folder" { [Folder 3] } frame "Foo" { [Frame 4] } } [Another Component] --> [Example 1] [Example 1] --> [Folder 3] [Folder 3] --> [Frame 4] @enduml</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/PlantUml#gantt-example</url>
    <fullTitle>Znai: PlantUml, Gantt Example [Visuals]</fullTitle>
    <text>
      <text>@startgantt [Task1] lasts 4 days then [Task1.1] lasts 4 days [Task1.2] starts at [Task1]'s end and lasts 7 days [Task2] lasts 5 days then [Task2.1] lasts 4 days [MaxTaskEnd] happens at [Task1.1]'s end [MaxTaskEnd] happens at [Task1.2]'s end [MaxTaskEnd] happens at [Task2.1]'s end @endgantt</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/iframe#embedding-video</url>
    <fullTitle>Znai: Iframe, Embedding Video [Visuals]</fullTitle>
    <text>
      <text>Use include-iframe to embed content from other place. By default, aspect ratio set to 16:9 . :include-iframe: https://www.youtube.com/embed/tgbNymZ7vqY</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/visuals/iframe#aspect-ratio</url>
    <fullTitle>Znai: Iframe, Aspect Ratio [Visuals]</fullTitle>
    <text>
      <text>Use aspectRatio to change aspect ratio of the embedded content :include-iframe: https://www.youtube.com/embed/tgbNymZ7vqY {aspectRatio: "4:3"}</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/layout/tabs#primary-use-case</url>
    <fullTitle>Znai: Tabs, Primary Use Case [Layout]</fullTitle>
    <text>
      <text>Imagine your product supports multiple ways of achieving a final result:REST Web CLI Java Python more... You can use tabs to allow your user to choose the method to accomplish the goal covered in the documentation. Tab selections will persist for users and provide streamlined experience.Don't: use tabs as navigation experience. If your user needs both Java and Python executed one by one you need to show steps one after the other in proper order.</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/layout/tabs#definition</url>
    <fullTitle>Znai: Tabs, Definition [Layout]</fullTitle>
    <text>
      <text>To define multiple tabs we use fenced code block: ```tabs JavaScript: :include-file: snippets/file-name.js Java: :include-file: snippets/WideCode.java Cpp: :include-cpp: snippets/simple.cpp {entry: 'main', bodyOnly: true} ``` This will generate a multi-tab widget with include- plugin content for each tab. JavaScript class JsClass { constructor() { usefulAction() } } export default JsClass Java class InternationalPriceService implements PriceService { private static void LongJavaInterfaceNameWithSuperFactory createMegaAbstractFactory(final ExchangeCalendarLongerThanLife calendar) { ... } } Cpp Selecting a tab will switch all the tabs on every page.</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/layout/tabs#markdown-per-tab</url>
    <fullTitle>Znai: Tabs, Markdown Per Tab [Layout]</fullTitle>
    <text>
      <text>Any valid Markdown can be used in place of include- content.A typical use case for installation instructions might be dividing content per language or environment: ````tabs JavaScript: First you need to download WebStorm and then run the following using your terminal ```bash $ yarn install $ yarn start ``` Java: First you need to download Intellij IDEA and then run the following using your terminal ```bash $ mvn install $ mvn exec:exec ``` Cpp: First you need to download CLion and then run the following using your terminal ```bash $ pwd $ whoamis ``` ```` JavaScript First you need to download WebStorm and then run the following using your terminal bash $ yarn install $ yarn start Java First you need to download Intellij IDEA and then run the following using your terminal bash $ mvn install $ mvn exec:exec Cpp First you need to download CLion and then run the following using your terminal bash $ pwd $ whoamis</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/layout/tabs#separate-markdown-files</url>
    <fullTitle>Znai: Tabs, Separate Markdown Files [Layout]</fullTitle>
    <text>
      <text>Consider extracting content to separate markup files if content becomes long. Use the include-markdown plugin to include external content. ```tabs JavaScript: :include-markdown: instructions/javascript-install.md Java: :include-markdown: instructions/java-install.md Cpp: :include-markdown: instructions/cpp-install.md ``` Each tab will display inlined markdown from specified files. JavaScript First you need to download WebStorm and then run the following using your terminal $ yarn install $ yarn start Java First you need to download Intellij IDEA and then run the following using your terminal $ mvn install $ mvn exec:exec Cpp First you need to download CLion and then run the following using your terminal $ pwd $ whoami</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/layout/tabs#attention-signs</url>
    <fullTitle>Znai: Tabs, Attention Signs [Layout]</fullTitle>
    <text>
      <text>Use extra space(s) in front of Note: or other attention sign keywords to put attention signs inside a tab. Remember if you put 4+ spaces, your paragraph will become a code snippet. ````tabs JavaScript: ```bash $ yarn install $ yarn start ``` Avoid: committing node_modules Java: First you need to download Intellij IDEA and then run the following using your terminal ```bash $ mvn install $ mvn exec:exec ``` Warning: `mvn` install for the first time may take considerable amount of time Cpp: First you need to download CLion and then run the following using your terminal ```bash $ pwd $ whoamis ``` Question: is C++ awesome or what? ```` JavaScript bash $ yarn install $ yarn start Do not: commit node_modules to the repository Java First you need to download Intellij IDEA and then run the following using your terminal bash $ mvn install $ mvn exec:exec Warning: mvn install for the first time may take considerable amount of time Cpp First you need to download CLion and then run the following using your terminal bash $ pwd $ whoamis Question: is C++ awesome or what?</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/layout/tables#csv</url>
    <fullTitle>Znai: Tables, CSV [Layout]</fullTitle>
    <text>
      <text>Instead of aligning tables using one of the standard Markdown extensions, you can use your CSV editor of choice. :include-table: table.csv In this way, the following CSV file... Account, Price, Description #12BGD3, 100, custom table with a long attachment #12BGD4, 90, custom table with a short attachment #12BGD5, 150, chair #91AGB1, 10, lunch ...will render like so: Account Price Description #12BGD3 100 custom table with a long attachment #12BGD4 90 custom table with a short attachment #12BGD5 150 chair #91AGB1 10 lunch</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/layout/tables#json</url>
    <fullTitle>Znai: Tables, JSON [Layout]</fullTitle>
    <text>
      <text>This extension can be used to display data from a JSON file representing tabular data. :include-table: table.json So the following JSON file... [ { "Account": "#12BGD3", "Price": 100, "Description": "custom table with a long attachment" }, { "Account": "#12BGD3", "Price": 150, "Description": "chair" }, { "Account": "#91AGB1", "Price": 10, "Description": "lunch" } ] ...will render like so: Account Price Description #12BGD3 100 custom table with a long attachment #12BGD3 150 chair #91AGB1 10 lunch</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/layout/tables#title</url>
    <fullTitle>Znai: Tables, Title [Layout]</fullTitle>
    <text>
      <text>Use title parameter to set a table title. :include-table: table.json {title: "Monthly Report"} Account Price Description #12BGD3 100 custom table with a long attachment #12BGD3 150 chair #91AGB1 10 lunch</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/layout/tables#anchor</url>
    <fullTitle>Znai: Tables, Anchor [Layout]</fullTitle>
    <text>
      <text>When you specify a title, hover mouse over it to see a clickable anchor.Use anchorId to override auto generated identifier. :include-table: table/table.json {title: "Monthly Report", anchorId: "my-super-table"} Account Price Description #12BGD3 100 custom table with a long attachment #12BGD3 150 chair #91AGB1 10 lunch</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/layout/tables#collapse</url>
    <fullTitle>Znai: Tables, Collapse [Layout]</fullTitle>
    <text>
      <text>Use collapsed: true|false to make image collapsible. Note: title option is required markdown :include-table: table/table.json { title: "Monthly Report", collapsed: true } Account Price Description #12BGD3 100 custom table with a long attachment #12BGD3 150 chair #91AGB1 10 lunch</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/layout/tables#no-gap</url>
    <fullTitle>Znai: Tables, No Gap [Layout]</fullTitle>
    <text>
      <text>Use noGap: true to remove top/bottom margins when there are multiple tables in a row. markdown :include-table: table/table.json { title: "Monthly Report", collapsed: true, noGap: true } :include-table: table/table.json { title: "Weekly Report", collapsed: false } Account Price Description #12BGD3 100 custom table with a long attachment #12BGD3 150 chair #91AGB1 10 lunch Account Price Description #12BGD3 100 custom table with a long attachment #12BGD3 150 chair #91AGB1 10 lunch</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/layout/tables#highlight</url>
    <fullTitle>Znai: Tables, Highlight [Layout]</fullTitle>
    <text>
      <text>Use highlightRow to highlight a row, or a set of rows by their index :include-table: table/table.json {title: "Highlight multiple rows", highlightRow: [0, 2]} Account Price Description #12BGD3 100 custom table with a long attachment #12BGD3 150 chair #91AGB1 10 lunch :include-table: table/table.json {title: "Highlight single row", highlightRow: 1} Account Price Description #12BGD3 100 custom table with a long attachment #12BGD3 150 chair #91AGB1 10 lunch</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/layout/tables#arrange-and-remove-columns</url>
    <fullTitle>Znai: Tables, Arrange and Remove Columns [Layout]</fullTitle>
    <text>
      <text>To change the order of columns or to filter out certain columns, specify the columns parameter. :include-table: table.csv {columns: ["Description", "Price"]} Description Price custom table with a long attachment 100 custom table with a short attachment 90 chair 150 lunch 10</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/layout/tables#filter-rows</url>
    <fullTitle>Znai: Tables, Filter Rows [Layout]</fullTitle>
    <text>
      <text>Use to include only rows that match a regular expression :include-table: table/table.csv {includeRowsRegexp: ["table", "cha.."]} Account Price Description #12BGD3 100 custom table with a long attachment #12BGD4 90 custom table with a short attachment #12BGD5 150 chair Use to exclude rows that match a regular expression :include-table: table/table.csv {includeRowsRegexp: ["table", "cha.."], excludeRowsRegexp: "short"} Account Price Description #12BGD3 100 custom table with a long attachment #12BGD5 150 chair</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/layout/tables#width</url>
    <fullTitle>Znai: Tables, Width [Layout]</fullTitle>
    <text>
      <text>By default, columns width is auto-calculated to fit the values inside. Use width to control the width of a column. :include-table: table.csv {Price: {width: 200}, "Description": {width: 400}} Account Price Description #12BGD3 100 custom table with a long attachment #12BGD4 90 custom table with a short attachment #12BGD5 150 chair #91AGB1 10 lunch Use percentage value to change column size relative to the page content width. :include-table: table/table.csv {Price: {width: "50%"}, "Description": {width: "30%"}} Account Price Description #12BGD3 100 custom table with a long attachment #12BGD4 90 custom table with a short attachment #12BGD5 150 chair #91AGB1 10 lunch Note: total percentage of all columns can go above 100%, in which case a scroll bar will be used to fit the content :include-table: table/table.csv {Price: {width: "50%"}, "Description": {width: "60%"}} Account Price Description #12BGD3 100 custom table with a long attachment #12BGD4 90 custom table with a short attachment #12BGD5 150 chair #91AGB1 10 lunch</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/layout/tables#column-names-conflict</url>
    <fullTitle>Znai: Tables, Column Names Conflict [Layout]</fullTitle>
    <text>
      <text>Use _ prefix if a column name matches the plugin parameter name like title when setting column specific parameters. :include-table: table/table-conflict.csv {"_title": {width: "80%"}} account title #12BGD3 custom table with a long attachment #12BGD4 custom table with a short attachment</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/layout/tables#min-width</url>
    <fullTitle>Znai: Tables, Min Width [Layout]</fullTitle>
    <text>
      <text>Use minColumnWidth to set min width for all table columns :include-table: table/table.csv {minColumnWidth: 400, "Description": {width: 500}} Account Price Description #12BGD3 100 custom table with a long attachment #12BGD4 90 custom table with a short attachment #12BGD5 150 chair #91AGB1 10 lunch</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/layout/tables#wide-mode</url>
    <fullTitle>Znai: Tables, Wide Mode [Layout]</fullTitle>
    <text>
      <text>Use wide: true to make table occupy all available width :include-table: table/table.csv {wide: true, minColumnWidth: 400, title: "My Items"} Account Price Zip Code Rating Description #12BGD3 100 11111 4 custom table with a long attachment #12BGD3 150 22222 5 chair #91AGB1 10 33333 4.5 lunch</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/layout/tables#text-alignment</url>
    <fullTitle>Znai: Tables, Text Alignment [Layout]</fullTitle>
    <text>
      <text>Use align to change a column text alignment. :include-table: table.csv {Price: {width: 200, align: "right"}} Account Price Description #12BGD3 100 custom table with a long attachment #12BGD4 90 custom table with a short attachment #12BGD5 150 chair #91AGB1 10 lunch JSON data example: :include-table: table.json {Price: {width: 100, align: "right"}} Account Price Description #12BGD3 100 custom table with a long attachment #12BGD3 150 chair #91AGB1 10 lunch</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/layout/tables#mapping</url>
    <fullTitle>Znai: Tables, Mapping [Layout]</fullTitle>
    <text>
      <text>Use mappingPath to provide a way to override table values using mapping table. Feature Name, V1, V2 featureA, +, + featureB, -, + +, `:icon: check {stroke: "green"}` -, `:icon: slash {stroke: "red"}` :include-table: table.csv {mappingPath: "mapping.csv"} Feature Name V1 V2 featureA `:icon: check {stroke: "green"}` `:icon: check {stroke: "green"}` featureB `:icon: slash {stroke: "red"}` `:icon: check {stroke: "green"}` Note: We used visuals/icons Icons in this example, but you can use any plugins or any text you want.</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/layout/tables#inlined</url>
    <fullTitle>Znai: Tables, Inlined [Layout]</fullTitle>
    <text>
      <text>```table {title: "my table", Price: {width: 100, align: "right"}} Account, Price, Description #12BGD3, 100, custom table with a long attachment #12BGD3, 150, chair #91AGB1, 10, lunch ``` Account Price Description #12BGD3 100 custom table with a long attachment #12BGD3 150 chair #91AGB1 10 lunch</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/layout/tables#multiline-content</url>
    <fullTitle>Znai: Tables, Multiline Content [Layout]</fullTitle>
    <text>
      <text>Use quotes to provide multi line markdown content such as bullet points and code snippets Account, Price, Description #12BGD3, 100, "multi line markdown with * bullet point * list " #12BGD3, 150, "and some code snippet ```java class HelloWorld { } ``` " Account Price Description #12BGD3 100 multi line markdown with * bullet point * list #12BGD3 150 and some code snippet ```java class HelloWorld { } ```</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/layout/tables#markdown-in-cells</url>
    <fullTitle>Znai: Tables, Markdown in Cells [Layout]</fullTitle>
    <text>
      <text>You can use Markdown table syntax within your table file. Account, Price, Description #12BGD3, 100, **custom** table with a long attachment #12BGD3, 150, chair #91AGB1, 10, `lunch` Account Price Description #12BGD3 100 **custom** table with a long attachment #12BGD3 150 chair #91AGB1 10 `lunch`</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/layout/tables#github-flavored-table</url>
    <fullTitle>Znai: Tables, Github Flavored Table [Layout]</fullTitle>
    <text>
      <text>| Github | Flavored | Table | | ------------- |:-------------:| -----:| | col 3 is | right-aligned | $1600 | | col 2 is | centered | $12 | Github Flavored Table [{text=col 3 is, type=SimpleText}] [{text=right-aligned, type=SimpleText}] [{text=$1600, type=SimpleText}] [{text=col 2 is, type=SimpleText}] [{text=centered, type=SimpleText}] [{text=$12, type=SimpleText}]</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/layout/columns#information-layout</url>
    <fullTitle>Znai: Columns, Information Layout [Layout]</fullTitle>
    <text>
      <text>Use columns plugin to render content in two columns:Before-and-after transition Action and its result Input and output Result comparison</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/layout/columns#two-columns</url>
    <fullTitle>Znai: Columns, Two Columns [Layout]</fullTitle>
    <text>
      <text>To define two columns layout use fenced code block and left: and right: labels markdown ```columns left: this content goes to the left and can span multiple lines right: this content goes to the right and can span multiple lines ``` this content goes to the leftand can span multiple lines this content goes to the right and can span multiple lines</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/layout/columns#three-columns</url>
    <fullTitle>Znai: Columns, Three Columns [Layout]</fullTitle>
    <text>
      <text>To define three columns layout use fenced code block and left: , middle: and right: labels markdown ```columns left: ### Pros {style: "api"} * Item One middle: ### Undecided {style: "api"} * Item Two * Item Three right: ### Cons {style: "api"} * Item Four ``` Pros Item One Undecided Item Two Item Three Cons Item Four</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/layout/columns#sizes</url>
    <fullTitle>Znai: Columns, Sizes [Layout]</fullTitle>
    <text>
      <text>Size can be specified for a column as a portion . By default, both portions are assigned a value of 10 . If you specify right column portion to be 5 , then left will be left as 10 by default, leaving right side to be roughly 33% in size. http.get("/weather") { temperature.shouldBe &lt; 100 } http.doc.capture("weather-example") ```columns {right: {portion: 5}} left: :include-groovy: org/testingisdocumenting/testing/examples/restapi/WebTauRestAPIGroovyTest.groovy { title: "WebTau REST API test example", entry: "weather", bodyOnly: true } right: :include-json: weather-example/response.json { title: "weather response example", pathsFile: "weather-example/paths.json" } ```</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/layout/columns#border</url>
    <fullTitle>Znai: Columns, Border [Layout]</fullTitle>
    <text>
      <text>Use border to add a border separator between columns BeforeHello World AfterWorld Of Hellos ```columns {border: true} left: **Before** Hello World right: **After** World Of Hellos ```</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/layout/columns#alignment</url>
    <fullTitle>Znai: Columns, Alignment [Layout]</fullTitle>
    <text>
      <text>Use align to change a column content alignment. BeforeHello World AfterWorld Of Hellos ```columns {border: true, left: {align: "right"}} left: **Before** Hello World right: **After** World Of Hellos ```</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/layout/columns#presentation-mode</url>
    <fullTitle>Znai: Columns, Presentation Mode [Layout]</fullTitle>
    <text>
      <text>In Presentation Mode each column content will appear on slide transition</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/layout/templates#re-usable-patterns</url>
    <fullTitle>Znai: Templates, Re-usable patterns [Layout]</fullTitle>
    <text>
      <text>Let's consider a chat REST API example where we want to display a sample input, example code snippet, and sample output. Here how documentation may look like.Use to send a new message http.post("/messages", [message: "Hello all"]) { id.should == "mid1" } This is the source to render the layout above :include-groovy: org/testingisdocumenting/testing/examples/restapi/WebTauRestAPIGroovyTest.groovy { title: "POST messages", entry: "postMessages", bodyOnly: true, excludeRegexp: "http.doc" } ```columns left: :include-json: chat-post-messages/request.json { title: "POST /messages request" } right: :include-json: chat-post-messages/response.json { title: "POST /messages response", pathsFile: "chat-post-messages/paths.json" } ``` Note: request and response were automatically captured using synergy-with-testing/REST-API WebTau testing framework.We need to document other methods as well, and as you can imagine, the repetition will take place.</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/layout/templates#extract-a-pattern</url>
    <fullTitle>Znai: Templates, Extract A Pattern [Layout]</fullTitle>
    <text>
      <text>Let's move a block we plan to repeat into a separate file and replace hardcoding of entries like post with placeholders. Znai uses the https://freemarker.apache.org FreeMarker template engine. :include-groovy: org/testingisdocumenting/testing/examples/restapi/WebTauRestAPIGroovyTest.groovy { title: "${method?upper_case} messages", entry: "${method}Messages", bodyOnly: true, excludeRegexp: "http.doc" } ```columns left: :include-json: chat-${method}-messages/request.json { title: "${method?upper_case} /messages request" } right: :include-json: chat-${method}-messages/response.json { title: "${method?upper_case} /messages response", pathsFile: "chat-post-messages/paths.json" } ```</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/layout/templates#use-a-pattern</url>
    <fullTitle>Znai: Templates, Use A Pattern [Layout]</fullTitle>
    <text>
      <text>:include-template: templates/messages-http-call.md {method: "put"} http.post("/messages/mid1", [message: "Hello all!"]) { status.should == "SUCCESS" }</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/layout/two-sides-pages#setup</url>
    <fullTitle>Znai: Two Sides Pages, Setup [Layout]</fullTitle>
    <text>
      <text>To enable two-sided layout as seen on this page, add the following at the beginning of a Markdown file: markdown --- type: two-sides ---</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/layout/two-sides-pages#details-side</url>
    <fullTitle>Znai: Two Sides Pages, Details Side [Layout]</fullTitle>
    <text>
      <text>Use the right pane to display additional details. It could be a REST response or a code snippet.Use include-meta in front of some content to place it on the right side of the page. All the following content will go to the right side. At the start of a new section it will be reset. markdown :include-open-api: snippets/open-api/uber.json {method: "get", path: "/v1/estimates/time"} :include-meta: {rightSide: true} :include-json: two-sides/price-estimate.json</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/layout/two-sides-pages#open-api-example</url>
    <fullTitle>Znai: Two Sides Pages, Open API Example [Layout]</fullTitle>
    <text>
      <text>Responses 200 default</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/layout/two-sides-pages#single-data-block-shortcut</url>
    <fullTitle>Znai: Two Sides Pages, Single Data Block Shortcut [Layout]</fullTitle>
    <text>
      <text>Account Price Description #12BGD3 100 custom table with a long attachment #12BGD4 90 custom table with a short attachment #12BGD5 150 chair #91AGB1 10 lunch Account, Price, Description #12BGD3, 100, custom table with a long attachment #12BGD4, 90, custom table with a short attachment #12BGD5, 150, chair #91AGB1, 10, lunch Use rightSide: true as a parameter to include- plugins to move result to the right side. # Single Data Block Shortcut :include-table: layout/table/table.csv :include-file: layout/table/table.csv {rightSide: true}</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/layout/two-sides-pages#aligning-data-in-columns</url>
    <fullTitle>Znai: Two Sides Pages, Aligning Data in Columns [Layout]</fullTitle>
    <text>
      <text>Use an include-empty-block to align code snippets or other data block on both sides when there is an extra text on either side. Account Price Description #12BGD3 100 custom table with a long attachment #12BGD4 90 custom table with a short attachment #12BGD5 150 chair #91AGB1 10 lunch Account, Price, Description #12BGD3, 100, custom table with a long attachment #12BGD4, 90, custom table with a short attachment #12BGD5, 150, chair #91AGB1, 10, lunch Table and code snippets above are aligned by using an empty block on the right side. markdown :include-empty-block: {rightSide: true} :include-table: layout/table/table.csv :include-file: layout/table/table.csv {rightSide: true}</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/layout/two-sides-tabs#unified-tabs</url>
    <fullTitle>Znai: Two Sides Tabs, Unified Tabs [Layout]</fullTitle>
    <text>
      <text>In two sides layout tabs selection is moved to a single place (default is top right panel).</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/layout/two-sides-tabs#definition</url>
    <fullTitle>Znai: Two Sides Tabs, Definition [Layout]</fullTitle>
    <text>
      <text>To define multiple tabs we use fenced code block ```tabs JavaScript: :include-file: snippets/file-name.js Java: :include-file: snippets/WideCode.java Cpp: :include-cpp: snippets/simple.cpp {entry: 'main', bodyOnly: true} ``` This will generate a multi-tab widget with an include plugin content per tab.Note: Selecting a tab will switch all the tabs on every page. JavaScript class JsClass { constructor() { usefulAction() } } export default JsClass Java class InternationalPriceService implements PriceService { private static void LongJavaInterfaceNameWithSuperFactory createMegaAbstractFactory(final ExchangeCalendarLongerThanLife calendar) { ... } } Cpp</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/layout/two-sides-tabs#markdown-per-tab</url>
    <fullTitle>Znai: Two Sides Tabs, Markdown Per Tab [Layout]</fullTitle>
    <text>
      <text>Any valid Markdown can be used as the content of each tab. Typical use case for installation instructions: extract differences per language or environment ````tabs JavaScript: First you need to download WebStorm and then run the following using your terminal ```bash $ yarn install $ yarn start ``` Java: First you need to download Intellij IDEA and then run the following using your terminal ```bash $ mvn install $ mvn exec:exec ``` Cpp: First you need to download CLion and then run the following using your terminal ```bash $ pwd $ whoamis ``` ```` JavaScript First you need to download WebStorm and then run the following using your terminal bash $ yarn install $ yarn start Java First you need to download Intellij IDEA and then run the following using your terminal bash $ mvn install $ mvn exec:exec Cpp First you need to download CLion and then run the following using your terminal bash $ pwd $ whoamis</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/layout/jupyter-notebook-two-sides#code-first</url>
    <fullTitle>Znai: Jupyter Notebook Two Sides, Code First [Layout]</fullTitle>
    <text>
      <text>snippets/jupyter-notebook The include-jupyter extension automatically assigns {meta: {rightSide: true}} to output cells. If page type is set to two-sides you will get automatic split between code and output.Note: Content below is included using include-jupyter</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/layout/jupyter-notebook-two-sides#pandas</url>
    <fullTitle>Znai: Jupyter Notebook Two Sides, Pandas [Layout]</fullTitle>
    <text>
      <text>Use storyFirst if you use a notebook with Markdown cells to tell a story. In this mode, code will be moved to the right side and a reader can focus on the story itself. :include-jupyter: notebook.ipynb {storyFirst: true} Displaying values using panda display Values can be displayed using standard console outputOr using library to render a html snippet</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/python/content-extraction#content</url>
    <fullTitle>Znai: Content Extraction, Content [Python]</fullTitle>
    <text>
      <text>Note: Function Content support requires running znai in an environment with Python 3.8 or later.All the examples below are from the following example Python file: my_var = "a variable" def my_func(p1, p2): """ text inside my *func* doc * list one * list two Parameters ---------- p1: String parameter one description p2: String parameter two description """ return 2 + 2 class Animal: """ animal top level class doc string ``` code block ``` """ def says(self): """ animal **talks** `code` """ print("hello") Use include-python plugin to extract function, class or global variable content.</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/python/content-extraction#function</url>
    <fullTitle>Znai: Content Extraction, Function [Python]</fullTitle>
    <text>
      <text>To show the full contents of a function: :include-python: python/example.py {entry: "Animal.says"} def says(self): """ animal **talks** `code` """ print("hello") This also works for global functions: :include-python: python/example.py {entry: "my_func"} def my_func(p1, p2): """ text inside my *func* doc * list one * list two Parameters ---------- p1: String parameter one description p2: String parameter two description """ return 2 + 2 To show a function's body, without signature or doc string: :include-python: python/example.py {entry: "Animal.says", bodyOnly: true} print("hello") This also works for global functions: :include-python: python/example.py {entry: "my_func", bodyOnly: true} return 2 + 2</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/python/content-extraction#title</url>
    <fullTitle>Znai: Content Extraction, Title [Python]</fullTitle>
    <text>
      <text>Use the title property to specify an extracted snippet title. :include-python: python/example.py {entry: "Animal.says", bodyOnly: true, title: "extracted snippet"} print("hello")</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/python/content-extraction#anchor</url>
    <fullTitle>Znai: Content Extraction, Anchor [Python]</fullTitle>
    <text>
      <text>Use anchorId to make a code snippet linkable. Hover mouse over title to see a clickable anchor. :include-python: python/example.py { entry: "Animal.says", bodyOnly: true, title: "extracted snippet", anchorId: "my-extracted-snippet" } print("hello")</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/python/content-extraction#variable</url>
    <fullTitle>Znai: Content Extraction, Variable [Python]</fullTitle>
    <text>
      <text>To show a variable's definition and assignment: :include-python: python/example.py {entry: "my_var"} my_var = "a variable" To show only a variable's value: :include-python: python/example.py {entry: "my_var", bodyOnly: true} "a variable"</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/python/content-extraction#class</url>
    <fullTitle>Znai: Content Extraction, Class [Python]</fullTitle>
    <text>
      <text>To show the full class definition: :include-python: python/example.py {entry: "Animal"} class Animal: """ animal top level class doc string ``` code block ``` """ def says(self): """ animal **talks** `code` """ print("hello") To show the contents of a class without the class declaration or doc string: :include-python: python/example.py {entry: "Animal", bodyOnly: true} def says(self): """ animal **talks** `code` """ print("hello")</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/python/description-extraction#doc-string</url>
    <fullTitle>Znai: Description Extraction, Doc String [Python]</fullTitle>
    <text>
      <text>Use include-python-doc plugin to embed py doc string with markdown into documentation. Znai uses https://pandas.pydata.org/docs/development/contributing_docstring.html Pandas style doc string to parse description and parameters. my_var = "a variable" def my_func(p1, p2): """ text inside my *func* doc * list one * list two Parameters ---------- p1: String parameter one description p2: String parameter two description """ return 2 + 2 class Animal: """ animal top level class doc string ``` code block ``` """ def says(self): """ animal **talks** `code` """ print("hello") :include-python-doc: python/example.py {entry: "my_func"} text inside my *func* doc * list one * list two Note: Plugin ignores parameters block and only includes the description text. Check next section to see how to include parameters :include-python-doc: python/example.py {entry: "Animal"} animal top level class doc string ``` code block ``` :include-python-doc: python/example.py {entry: "Animal.says"} animal **talks** `code`</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/python/description-extraction#doc-parameters</url>
    <fullTitle>Znai: Description Extraction, Doc Parameters [Python]</fullTitle>
    <text>
      <text>Use include-python-doc-params plugin to render parameters extracted from pydoc text def my_func(label, price): """ text inside my *func* doc * list one * list two Parameters ---------- label : str label to use to *render* item in the store price : fin.money.Money price associated with the **item** Returns ------- str status of the operation `OK` for good """ return "OK" :include-python-doc-params: python/pydoc-params.py {entry: "my_func", title: "result and parameters"} text inside my *func* doc * list one * list two Parameters ---------- label : str label to use to *render* item in the store price : fin.money.Money price associated with the **item** Returns ------- str status of the operation `OK` for good Note: read more about snippets/api-parameters API parameters for additional properties</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/python/description-extraction#type-hints</url>
    <fullTitle>Znai: Description Extraction, Type Hints [Python]</fullTitle>
    <text>
      <text>If you define https://docs.python.org/3/library/typing.html Type Hints, you can omit types from PyDoc text and Znai will take the types from the signature import fin def my_func(label: str, price: fin.money.Money) -> str: """ text inside my *func* doc * list one * list two Parameters -------------- label : label to use to *render* item in the store price : price associated with the **item** Returns ------- status of the operation `OK` for good """ return "OK" :include-python-doc-params: python/pydoc-params-type-hints.py {entry: "my_func", title: "result and parameters"} text inside my *func* doc * list one * list two Parameters -------------- label : label to use to *render* item in the store price : price associated with the **item** Returns ------- status of the operation `OK` for good</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/python/auto-reference#method-function-definition</url>
    <fullTitle>Znai: Auto Reference, Method/Function Definition [Python]</fullTitle>
    <text>
      <text>Use python-method to include function/method definition with signature, documentation and parameters list :include-python-method: fin.money.render_money render_money render money to a string returns str money represented as text amount fin.money.Money amount to print message str message to use for audit def render_money(amount: Money, message: str = "") -> str: """ render money to a string Parameters -------------- amount: amount to print message: message to use for audit Returns ------- money represented as text """ return f"{message} {amount.amount} {amount.currency}"</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/python/auto-reference#fin-money-money</url>
    <fullTitle>Znai: Auto Reference, fin.money.Money [Python]</fullTitle>
    <text>
      <text>To define a class use python-class include plugin :include-python-class: fin.money.Money """ Money representation. Encapsulates money type, combining amount and currency. Deals with precision errors. Warning: avoid using `int` in place of money and use this type instead """ def __init__(self, amount: int, currency: str): """ generic constructor that accepts a currency Parameters ---------- amount: amount of money currency: currency to associate with the created Money """ self._amount = amount self._currency = currency @property def amount(self) -> int: """ amount in provided currency """ return self._amount @amount.setter def amount(self, amount: int): self.amount = amount @property def currency(self) -> str: """ money currency """ return self._currency @classmethod def dollars(cls, amount: int) -> 'Money': """ creates money instance with `USD` as the currency Parameters ---------- amount: dollar amount Returns ------- new money instance with `USD` as currency """ return cls(amount, "USD") def add(self, another: 'Money'): """ add money from another money instance Parameters -------------- another : money to add """ self.amount += another.amount Note: Once you define Money class, method arguments and parameter descriptions with the same type will automatically link to the place of definition Properties Members Details dollars __init__ add Money representation. Encapsulates money type, combining amount and currency. Deals with precision errors. Warning: avoid using `int` in place of money and use this type instead amount int amount in provided currency currency str [readonly] money currency Money.dollars Money.__init__ Money.add Money.dollars creates money instance with `USD` as the currency returns fin.money.Money new money instance with USD as currency amount int dollar amount Money.__init__ generic constructor that accepts a currency amount int amount of money currency str currency to associate with the created Money Money.add add money from another money instance another fin.money.Money money to add</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/python/auto-reference#department-worker</url>
    <fullTitle>Znai: Auto Reference, department.Worker [Python]</fullTitle>
    <text>
      <text>Example of inheritance from fin.money import Money class Person: """ Person, the root of all """ def __init__(self, name): self._name = name self._desire = "" @property def name(self) -> str: """ Person name, you'd better use it when talking to them """ return self._name @property def desire(self) -> str: """ Person desire, can change over time """ return self._desire @desire.setter def desire(self, new_desire: str): self._desire = new_desire def talk(self): """ person talks """ print(f"{self.name} talks") class Worker(Person): """ Works and improves the world """ def __init__(self, name: str, salary: Money): Person.__init__(self, name) self._salary = salary def work(self): """ work to the best ability """ pass @property def salary(self) -> Money: """ Annual non-yet-taxed salary """ return self._salary from department import Worker as Wo from fin.money import Money class WorkerCTO(Wo): """ CTO worker with all the qualities and attributes required for a successful business """ def __init__(self, name: str, salary: Money, goal: str): """ Create a new instance of CTO with provided name, salary and the goal Parameters ---------- name: CTO name salary: CTO salary goal: top priority goal to achieve """ Wo.__init__(self, name=name, salary=salary) self._goal = goal def work_hard(self, level: int): """ work as hard as possible to observe Parameters ---------- level: effort level from 0 to 100 """ pass @property def goal(self) -> str: """ CTO's top priority goal to achieve """ return self._goal @goal.setter def goal(self, new_goal: str): self._goal = new_goal :include-python-class: executive_department.WorkerCTO :include-python-class: department.Worker Note: Base classes that are defined somewhere in the documentation will turn into linksBase classes: , Properties WorkerCTO Members Worker Members Person Members WorkerCTO Details __init__ work_hard CTO worker with all the qualities and attributes required for a successful business Worker Person goal str CTO's top priority goal to achieve salary fin.money.Money [readonly] Annual non-yet-taxed salary desire str Person desire, can change over time name str [readonly] Person name, you'd better use it when talking to them WorkerCTO.__init__ WorkerCTO.work_hard Worker.work Person.talk WorkerCTO.__init__ Create a new instance of CTO with provided name, salary and the goal name str CTO name salary fin.money.Money CTO salary goal str top priority goal to achieve WorkerCTO.work_hard work as hard as possible to observe level int effort level from 0 to 100 Base classes: Properties Worker Members Person Members Worker Details __init__ work Works and improves the world Person salary fin.money.Money [readonly] Annual non-yet-taxed salary desire str Person desire, can change over time name str [readonly] Person name, you'd better use it when talking to them Worker.__init__ Worker.work Person.talk Worker.__init__ Worker.work work to the best ability</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/CPP/doxygen-setup#doxygen</url>
    <fullTitle>Znai: Doxygen Setup, Doxygen [CPP]</fullTitle>
    <text>
      <text>Znai parses generated https://www.doxygen.nl/index.html Doxygen XML files to extract and embedComments Signatures Parameters Use the building blocks to mix and match API documentation with visuals and other artifacts. Or use the built-in plugins to generate the whole blocks of API reference.</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/CPP/doxygen-setup#setup</url>
    <fullTitle>Znai: Doxygen Setup, Setup [CPP]</fullTitle>
    <text>
      <text>Specify index.xml location inside &lt;docroot>/doxygen.json { "indexPath": "doxygen/xml/index.xml" } Note: To read doxygen XMLs from zip, add path to the zip to flow/lookup-paths#zip-and-jar-lookup lookup-paths</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/CPP/description-extraction#members-comment-text</url>
    <fullTitle>Znai: Description Extraction, Members Comment Text [CPP]</fullTitle>
    <text>
      <text>Use include-doxygen-doc to extract a function description namespace utils { namespace nested { /** * top **level** comment *of* important * * list one * * list two * * list three * * 1. number one * 2. number two * * @param first_param description of first *param* * 1. item a * 2. item b * @param second_param description of second param */ void my_func(int first_param, bool second_param) { } /** * specific description for single param version * @param first_param description of first *param* * 1. item a * 2. item b */ void my_func(int first_param) { } } } void free_func() { } :include-doxygen-doc: utils::nested::my_func top level comment of important list one list two list three number one number two Note: Plugin ignores parameters block and only includes the description text</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/CPP/description-extraction#member-args-selection</url>
    <fullTitle>Znai: Description Extraction, Member Args Selection [CPP]</fullTitle>
    <text>
      <text>Use args param to pick an overload to use for comments extraction :include-doxygen-doc: utils::nested::my_func { title: "My Params", args: "int" } specific description for single param version Note: Args are coma and spaces sensitive. Znai will print available args variants in case of mismatch for you to copy and paste.</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/CPP/description-extraction#classes-comment-text</url>
    <fullTitle>Znai: Description Extraction, Classes Comment Text [CPP]</fullTitle>
    <text>
      <text>To extract class top level comment, provide full class name namespace utils { namespace second { /** * **Domain** specific context setting. Describes business setting and requirements. */ class MyClass { public: /// bark void bark(); }; /** * **Domain** specific context setting. Describes business setting and requirements. */ class ThirdClass { public: /// bark void bark(); }; } } :include-doxygen-doc: utils::second::MyClass Domain specific context setting. Describes business setting and requirements.</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/CPP/description-extraction#extract-parameters</url>
    <fullTitle>Znai: Description Extraction, Extract Parameters [CPP]</fullTitle>
    <text>
      <text>Use include-doxygen-doc-params to extract parameters description from doxygen comments :include-doxygen-doc-params: utils::nested::my_func { title: "My Params" } first_param int description of first param item a item b second_param bool description of second param Use small: true option to make parameters smaller first_param int description of first param item a item b second_param bool description of second param</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/CPP/description-extraction#extract-parameters-by-args</url>
    <fullTitle>Znai: Description Extraction, Extract Parameters By Args [CPP]</fullTitle>
    <text>
      <text>Use args to select a specific overload by providing parameters string :include-doxygen-doc-params: utils::nested::my_func { title: "My Params", args: "int" } first_param int description of first param item a item b</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/CPP/description-extraction#extract-template-parameters</url>
    <fullTitle>Znai: Description Extraction, Extract Template Parameters [CPP]</fullTitle>
    <text>
      <text>Pass type: "template" parameter to include-doxygen-doc-params plugin to extract template parameters /** * prints a value and a new line * @param v1 value to print * @param v2 value to print * @tparam T1 type of the value one to print * @tparam T2 type of the value two to print */ template&lt;typename T1, typename T2> void multi_println(const T1&amp; v1, const T2&amp; v2) { std::cout &lt;&lt; v1 &lt;&lt; ", " &lt;&lt; v2 &lt;&lt; "\n"; } :include-doxygen-doc-params: multi_println { title: "Template parameters", type: "template" } v1 const T1 &amp; value to print v2 const T2 &amp; value to print</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/CPP/description-extraction#ignore-template-parameters</url>
    <fullTitle>Znai: Description Extraction, Ignore Template Parameters [CPP]</fullTitle>
    <text>
      <text>Use doc_ignore as part of template parameter name to remove it from signature /** * prints a value and a new line * @param v1 value to print * @param v2 value to print * @param v3 value to print * @param v4 value to print * @tparam T1 type of the value one to print * @tparam T2 type of the value two to print * @tparam T3 type of the value three to print * @tparam T4 type of the value four to print */ template&lt;typename T1, typename T2, typename T3, typename T4, typename T5_doc_ignore> void long_template_func(const T1&amp; v1, const T2&amp; v2, const T3&amp; v3, const T4&amp; v4) { } markdown :include-doxygen-member: long_template_func {signatureOnly: true}</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/CPP/description-extraction#return-description</url>
    <fullTitle>Znai: Description Extraction, Return Description [CPP]</fullTitle>
    <text>
      <text>Return description is part of parameters list /** * sums two numbers * @param a number to add to * @param b number that is added * @return *sum* of **two** numbers */ int add(int a, int b); :include-doxygen-doc-params: math::add return sum of two numbers a int number to add to b int number that is added</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/CPP/auto-reference#member-signature-comment-and-parameters</url>
    <fullTitle>Znai: Auto Reference, Member Signature, Comment And Parameters [CPP]</fullTitle>
    <text>
      <text>Use include-doxygen-member to render member signature, its description and parameters list namespace utils { namespace nested { /** * top **level** comment *of* important * * list one * * list two * * list three * * 1. number one * 2. number two * * @param first_param description of first *param* * 1. item a * 2. item b * @param second_param description of second param */ void my_func(int first_param, bool second_param) { } /** * specific description for single param version * @param first_param description of first *param* * 1. item a * 2. item b */ void my_func(int first_param) { } } } void free_func() { } :include-doxygen-member: utils::nested::my_func top level comment of important list one list two list three number one number two first_param int description of first param item a item b second_param bool description of second param markdown :include-doxygen-member: multi_println /** * prints a value and a new line * @param v1 value to print * @param v2 value to print * @tparam T1 type of the value one to print * @tparam T2 type of the value two to print */ template&lt;typename T1, typename T2> void multi_println(const T1&amp; v1, const T2&amp; v2) { std::cout &lt;&lt; v1 &lt;&lt; ", " &lt;&lt; v2 &lt;&lt; "\n"; } prints a value and a new line v1 const T1 &amp; value to print v2 const T2 &amp; value to print v1 const T1 &amp; value to print v2 const T2 &amp; value to print</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/CPP/auto-reference#member-signature-only</url>
    <fullTitle>Znai: Auto Reference, Member Signature Only [CPP]</fullTitle>
    <text>
      <text>Use signatureOnly: true parameter to render only member signature namespace utils { namespace second { /** * **Domain** specific context setting. Describes business setting and requirements. */ class MyClass { public: /// bark void bark(); }; /** * **Domain** specific context setting. Describes business setting and requirements. */ class ThirdClass { public: /// bark void bark(); }; } } :include-doxygen-member: utils::second::ThirdClass::bark { signatureOnly: true }</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/CPP/auto-reference#all-matching-signatures</url>
    <fullTitle>Znai: Auto Reference, All Matching Signatures [CPP]</fullTitle>
    <text>
      <text>namespace utils { namespace nested { void their_func(long param1, std::string param2, bool param3) { } /** * Description of *what* and *why* for their_func * * @param param1 description of param1 * @param param3 description of param3 */ void their_func(long param1, bool param3) { } void their_func(long param1) { } } } :include-doxygen-member: utils::nested::their_func { signatureOnly: true, includeAllMatches: true }</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/CPP/auto-reference#specific-member-by-args</url>
    <fullTitle>Znai: Auto Reference, Specific Member By Args [CPP]</fullTitle>
    <text>
      <text>Use args to select a specific overload by providing parameters string :include-doxygen-member: utils::nested::their_func { args: "long, bool" } Description of what and why for their_func param1 long description of param1 param3 bool description of param3 Note: Args are coma and spaces sensitive. Znai will print available args variants in case of mismatch for you to copy and paste.</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/CPP/auto-reference#utilssecondanotherclass</url>
    <fullTitle>Znai: Auto Reference, utils::second::AnotherClass [CPP]</fullTitle>
    <text>
      <text>Use include-doxygen-compound to render a definition of a class/struct :include-doxygen-compound: utils::second::AnotherClass Domain specific context setting. Describes business setting and requirements. Public Functions Static Public Functions Public Attributes Static Public Attributes Protected Functions Definitions sing sing out loud tone int tone at which to sing volume int volume at which to sing bark bark out loud myClass const MyClass &amp; to test reference tone int tone at which to sing volume int volume at which to sing smile global smile volume int smile volume number_of_sounds current number of sounds made counter help ask for help out loud example tone int tone at which to sing volume int volume at which to sing utils::second::AnotherClass</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/CPP/auto-reference#utilssecondmyclass</url>
    <fullTitle>Znai: Auto Reference, utils::second::MyClass [CPP]</fullTitle>
    <text>
      <text>Znai uses doxygen cross-reference to link definitions together. Class above references MyClass in its parameters. After you include definition of that class, MyClass reference above becomes a link. :include-doxygen-compound: utils::second::MyClass Domain specific context setting. Describes business setting and requirements. Public Functions Definitions bark bark utils::second::MyClass</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/java/content-extraction#method-body</url>
    <fullTitle>Znai: Content Extraction, Method Body [Java]</fullTitle>
    <text>
      <text>When you need to extract a specific method body, use the include-java plugin.Consider the file below: /** * Top level conceptual description of a {@link CustomDomain} problem. * &lt;p> * To avoid &lt;b>copy &amp; paste&lt;/b> of the content consider to re-use information. */ class HelloWorld { /** * Each year we hire students from different universities to increase * {@link Diversity} */ private int numberOfStudents; /** * Conceptual description of a &lt;i>Domain&lt;/i> problem. * &lt;p> * It will work only if you put high level description here and * &lt;b>not&lt;/b> implementation details. * * @param p1 important parameter of something * @param p2 sample &lt;i>offset&lt;/i> according to the rules of the universe * @return name of the &lt;b>best&lt;/b> sample */ public String sampleMethod(String p1, int p2) { validate(); process(p2); // important comment notifyAll(p1); // very important return bestSample(); } public void sampleMethod(Map&lt;String, Integer> p1, int p2, boolean isActive) { // overloaded method } /** * @param trader trader that performs action * @param transaction transaction to perform action on */ public void importantAction(Trader trader, Transaction transaction) { // TODO important } public Data createData() { // create data } } You can specify a method name to extract its full definition, or display only its body. :include-java: HelloWorld.java {entry: "sampleMethod", bodyOnly: true} If bodyOnly is specified, signature will be omitted. validate(); process(p2); // important comment notifyAll(p1); // very important return bestSample();</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/java/content-extraction#callout-comments</url>
    <fullTitle>Znai: Content Extraction, Callout Comments [Java]</fullTitle>
    <text>
      <text>Similar to how you snippets/code-comments#callout-comments specify comments type for a regular file, you can specify commentsType option for include-java . :include-java: HelloWorld.java {entry: "sampleMethod", bodyOnly: true, commentsType: "inline"} validate(); process(p2); // important comment notifyAll(p1); // very important return bestSample();</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/java/content-extraction#title</url>
    <fullTitle>Znai: Content Extraction, Title [Java]</fullTitle>
    <text>
      <text>Use title property to specify extracted code snippet title :include-java: HelloWorld.java {entry: "sampleMethod", bodyOnly: true, title: "my snippet"} validate(); process(p2); // important comment notifyAll(p1); // very important return bestSample();</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/java/content-extraction#anchor</url>
    <fullTitle>Znai: Content Extraction, Anchor [Java]</fullTitle>
    <text>
      <text>Use anchorId to make a code snippet linkable. Hover mouse over title to see a clickable anchor. :include-java: HelloWorld.java { entry: "sampleMethod", bodyOnly: true, title: "my snippet", anchorId: "my-java-snippet" } validate(); process(p2); // important comment notifyAll(p1); // very important return bestSample();</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/java/content-extraction#signature-only</url>
    <fullTitle>Znai: Content Extraction, Signature Only [Java]</fullTitle>
    <text>
      <text>You can also specify a method name and extract only its signature. :include-java: HelloWorld.java {entry: "sampleMethod", signatureOnly: true} If signatureOnly is specified, body will be omitted. public String sampleMethod(String p1, int p2) public void sampleMethod(Map&lt;String, Integer> p1, int p2, boolean isActive) Pass entrySeparator: "&lt;separator>" to have a provided line in between entries as a separator. :include-java: HelloWorld.java {entry: "sampleMethod", signatureOnly: true, entrySeparator: "..."} public String sampleMethod(String p1, int p2) ... public void sampleMethod(Map&lt;String, Integer> p1, int p2, boolean isActive)</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/java/content-extraction#overloads</url>
    <fullTitle>Znai: Content Extraction, Overloads [Java]</fullTitle>
    <text>
      <text>Specify types inside brackets to select an overloaded versions of your methods.Types should appear as they are in the file, i.e., if you use the short version of a type, you need to use the short version inside the plugin. :include-java: HelloWorld.java {entry: "sampleMethod(Map, int, boolean)"} Note: Generic types are erased and spaces after commas are optional public void sampleMethod(Map&lt;String, Integer> p1, int p2, boolean isActive) { // overloaded method }</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/java/content-extraction#type-body</url>
    <fullTitle>Znai: Content Extraction, Type Body [Java]</fullTitle>
    <text>
      <text>To extract class , interface or enum body use: :include-java: MyEnum.java {entry: "MyEnum"} enum MyEnum { /** * description of &lt;b>entry one&lt;/b> */ ENTRY_ONE, /** * description of entry two * &lt;ul> * &lt;li>item one&lt;/li> * &lt;li>item two&lt;/li> * &lt;/ul> */ ENTRY_TWO, /** * Don't use, instead use ENTRY_TWO */ @Deprecated ENTRY_THREE } Use bodyOnly to only display body of your type. :include-java: MyEnum.java {entry: "MyEnum", bodyOnly: true} /** * description of &lt;b>entry one&lt;/b> */ ENTRY_ONE, /** * description of entry two * &lt;ul> * &lt;li>item one&lt;/li> * &lt;li>item two&lt;/li> * &lt;/ul> */ ENTRY_TWO, /** * Don't use, instead use ENTRY_TWO */ @Deprecated ENTRY_THREE</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/java/content-extraction#multiple-entries</url>
    <fullTitle>Znai: Content Extraction, Multiple Entries [Java]</fullTitle>
    <text>
      <text>To display multiple methods at once pass a list to entry parameter :include-java: HelloWorld.java {entry: ["createData", "importantAction"]} This will render: public Data createData() { // create data } public void importantAction(Trader trader, Transaction transaction) { // TODO important } List important methods signatures at one place by passing signatureOnly: true . :include-java: HelloWorld.java {entry: ["createData", "importantAction"], signatureOnly: true} This will render: public Data createData() public void importantAction(Trader trader, Transaction transaction)</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/java/content-extraction#multiple-overloads</url>
    <fullTitle>Znai: Content Extraction, Multiple Overloads [Java]</fullTitle>
    <text>
      <text>To list of the overloads of a method, specify method name using the entry parameter. :include-java: HelloWorld.java {entry: "sampleMethod", signatureOnly: true} public String sampleMethod(String p1, int p2) public void sampleMethod(Map&lt;String, Integer> p1, int p2, boolean isActive)</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/java/content-extraction#multiple-bodies</url>
    <fullTitle>Znai: Content Extraction, Multiple Bodies [Java]</fullTitle>
    <text>
      <text>Pass multiple entries and bodyOnly to extract example of usage from unit tests public class HelloWorldTest { @Test public void exampleOfA() { a.action(); } @Test public void exampleOfB() { b.action(); } } :include-java: HelloWorldTest.java { entry: ["exampleOfA", "exampleOfB"], bodyOnly: true, title: "example of actions"} a.action(); b.action(); Pass entrySeparator: "&lt;separator>" to have a provided line in between entries as a separator. markdown :include-java: HelloWorldTest.java { entry: ["exampleOfA", "exampleOfB"], entrySeparator: "", bodyOnly: true, title: "example of actions"} a.action(); b.action();</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/java/description-extraction#class-level</url>
    <fullTitle>Znai: Description Extraction, Class Level [Java]</fullTitle>
    <text>
      <text>Documentation maintenance is one of the main goals of this documentation system. In the case of Java you may already use JavaDoc strings to explain certain concepts of your system. /** * Top level conceptual description of a {@link CustomDomain} problem. * &lt;p> * To avoid &lt;b>copy &amp; paste&lt;/b> of the content consider to re-use information. */ class HelloWorld { /** * Each year we hire students from different universities to increase * {@link Diversity} */ private int numberOfStudents; /** * Conceptual description of a &lt;i>Domain&lt;/i> problem. * &lt;p> * It will work only if you put high level description here and * &lt;b>not&lt;/b> implementation details. * * @param p1 important parameter of something * @param p2 sample &lt;i>offset&lt;/i> according to the rules of the universe * @return name of the &lt;b>best&lt;/b> sample */ public String sampleMethod(String p1, int p2) { validate(); process(p2); // important comment notifyAll(p1); // very important return bestSample(); } public void sampleMethod(Map&lt;String, Integer> p1, int p2, boolean isActive) { // overloaded method } /** * @param trader trader that performs action * @param transaction transaction to perform action on */ public void importantAction(Trader trader, Transaction transaction) { // TODO important } public Data createData() { // create data } } Instead of copy-and-pasting text between sources, you can refer to it inside your documentation. :include-java-doc: HelloWorld.java Text bellow is extracted from top class level JavaDoc Top level conceptual description of a CustomDomain problem. To avoid copy &amp; paste of the content consider to re-use information.</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/java/description-extraction#method-level</url>
    <fullTitle>Znai: Description Extraction, Method Level [Java]</fullTitle>
    <text>
      <text>Method level JavaDoc text can be referred to as well by specifying the entry parameter. :include-java-doc: HelloWorld.java {entry: "sampleMethod"} Text bellow is extracted from sampleMethod method JavaDoc Conceptual description of a Domain problem. It will work only if you put high level description here and not implementation details.</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/java/description-extraction#field-level</url>
    <fullTitle>Znai: Description Extraction, Field Level [Java]</fullTitle>
    <text>
      <text>:include-java-doc: HelloWorld.java {entry: "numberOfStudents"} Each year we hire students from different universities to increase Diversity</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/java/description-extraction#inner-classes</url>
    <fullTitle>Znai: Description Extraction, Inner Classes [Java]</fullTitle>
    <text>
      <text>Use NestedName.entityName to disambiguate a field or a method name class HelloWorld { private int importantScore; public static class Nested { /** * system caclulates &lt;b>importance&lt;/b> score based on following factors... */ private int importantScore; } } :include-java-doc: HelloWorldWithInner.java {entry: "Nested.importantScore"} system caclulates importance score based on following factors...</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/java/description-extraction#handling-links</url>
    <fullTitle>Znai: Description Extraction, Handling Links [Java]</fullTitle>
    <text>
      <text>Links defined with {@link MyClass} are automatically converted to snippets/inlined-code-snippets Inlined Code and become MyClass . To turn MyClass into a link you need to use snippets/code-references Code References.Use the referencesPath value to associate {@link CustomDomain} with the documentation link: CustomDomain, example-references/domain Trader, example-references/domain#trader Transaction, example-references/domain#transaction BUY, example-references/domain#transaction-buy SELL, example-references/domain#transaction-sell Alternatively you can define snippets/code-references#global-references Global References to turn MyClass into a link.</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/java/description-extraction#method-params</url>
    <fullTitle>Znai: Description Extraction, Method Params [Java]</fullTitle>
    <text>
      <text>:include-java-doc-params: HelloWorld.java {entry: "sampleMethod"} p1 String important parameter of something p2 int sample &lt;i>offset&lt;/i> according to the rules of the universe return String name of the &lt;b>best&lt;/b> sample Use the title parameter to specify a title. :include-java-doc-params: HelloWorld.java {entry: "importantAction", title: "Trading Required Parameters"} trader Trader trader that performs action transaction Transaction transaction to perform action on</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/java/description-extraction#method-params-with-references</url>
    <fullTitle>Znai: Description Extraction, Method Params With References [Java]</fullTitle>
    <text>
      <text>Use the snippets/code-references Code References file to link method parameters to reference pages.To do that, define references in a CSV file, using a two column format: type-or-variable-name, link . CustomDomain, example-references/domain Trader, example-references/domain#trader Transaction, example-references/domain#transaction BUY, example-references/domain#transaction-buy SELL, example-references/domain#transaction-sell :include-java-doc-params: HelloWorld.java { entry: "importantAction", title: "Trading Required Parameters", referencesPath: "references/javadoc-references-demo.csv"} trader Trader trader that performs action transaction Transaction transaction to perform action on Parameters are now linked with a reference section for the documentation.</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/java/description-extraction#enum-entries</url>
    <fullTitle>Znai: Description Extraction, Enum Entries [Java]</fullTitle>
    <text>
      <text>Use include-java-enum-entries to enumerate entries of a enum from a file. package my.company; enum MyEnum { /** * description of &lt;b>entry one&lt;/b> */ ENTRY_ONE, /** * description of entry two * &lt;ul> * &lt;li>item one&lt;/li> * &lt;li>item two&lt;/li> * &lt;/ul> */ ENTRY_TWO, /** * Don't use, instead use ENTRY_TWO */ @Deprecated ENTRY_THREE } :include-java-enum-entries: MyEnum.java ENTRY_ONE description of &lt;b>entry one&lt;/b> ENTRY_TWO description of entry two &lt;ul> &lt;li>item one&lt;/li> &lt;li>item two&lt;/li> &lt;/ul> ENTRY_THREE Don't use, instead use ENTRY_TWO You can exclude deprecated entries from the list by setting the excludeDeprecated parameter. :include-java-enum-entries: MyEnum.java {excludeDeprecated: true} ENTRY_ONE description of &lt;b>entry one&lt;/b> ENTRY_TWO description of entry two &lt;ul> &lt;li>item one&lt;/li> &lt;li>item two&lt;/li> &lt;/ul> ENTRY_THREE Don't use, instead use ENTRY_TWO Use the title parameter to specify a title. :include-java-enum-entries: TransactionTypes.java {title: "Transaction Types"} BUY buy intrument SELL sell instrument</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/java/description-extraction#enum-entries-with-references</url>
    <fullTitle>Znai: Description Extraction, Enum Entries With References [Java]</fullTitle>
    <text>
      <text>Use a snippets/code-references Code References file to link enum entries to reference pages.To do that, define references in a CSV file, using a two column format: enum-name, link . CustomDomain, example-references/domain Trader, example-references/domain#trader Transaction, example-references/domain#transaction BUY, example-references/domain#transaction-buy SELL, example-references/domain#transaction-sell package my.company; enum TransactionTypes { /** * buy intrument */ BUY, /** * sell instrument */ SELL } :include-java-enum-entries: TransactionTypes.java { title: "Transaction Types", referencesPath: "references/javadoc-references-demo.csv" } BUY buy intrument SELL sell instrument Enums are now linked with a reference section for the documentation.Note: you can reuse the same CSV file for Enums, Parameters, Code Snippets. Alternatively, you can use snippets/code-references#global-references Global References.</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/java/description-extraction#markdown</url>
    <fullTitle>Znai: Description Extraction, Markdown [Java]</fullTitle>
    <text>
      <text>Pass markdown: true parameter to the plugins to treat JavaDoc content as markdown /** * Top level **conceptual** description of a `CustomDomain` problem. * * markdown *list* * * item two * ``` * code snippet * goes here * ``` */ class HelloWorld { } :include-java-doc: HelloWorld.java {markdown: true} Top level conceptual description of a CustomDomain problem.markdown list item two code snippet goes here</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/java/auto-reference#coming-soon</url>
    <fullTitle>Znai: Auto Reference, Coming Soon [Java]</fullTitle>
    <text>
      <text>Auto reference similar to python/content-extraction Python is planned for the future releases.Create a https://github.com/testingisdocumenting/znai/issues GitHub Issue or https://github.com/testingisdocumenting/znai/discussions Discussion to help prioritize</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/synergy-with-testing/web-UI#screenshots-and-annotations</url>
    <fullTitle>Znai: Web UI, Screenshots And Annotations [Synergy With Testing]</fullTitle>
    <text>
      <text>In visuals/image-annotations Image Annotations you can specify annotations in an external file.Using a testing framework one can generate coordinates during a UI test based on elements' placement. Here is an example of using https://github.com/testingisdocumenting/webtau WebTau testing framework to capture a screenshot and annotations package webtauexamples import static org.testingisdocumenting.webtau.WebTauGroovyDsl.* def homeSearchInput = $('input[id*="search"]') def resultSearchInput = $("#search_form_input") def result = $('article[data-testid="result"]') scenario("capture screenshot") { browser.open("https://duckduckgo.com/") homeSearchInput.waitToBe visible homeSearchInput.setValue("testing is documenting\n") result.waitTo visible browser.doc.withAnnotations(resultSearchInput, result) .capture("duckduckgo-search") } markdown 1. Type question you want to be answered anonymously 2. Scan through results and pick the most relevant one :include-image: doc-artifacts/duckduckgo-search.png {annotate: true} Type question you want to be answered anonymously Scan through results and pick the most relevant one</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/synergy-with-testing/REST-API#request-and-response-capture</url>
    <fullTitle>Znai: REST API, Request and Response Capture [Synergy With Testing]</fullTitle>
    <text>
      <text>snippets/open-API Open API helps to define a formal API specification. And real examples of request/response helps to clarify.Instead of manually copy-and-pasting the responses to your documentation, consider running tests and automatically capturing the relevant artifacts.</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/synergy-with-testing/REST-API#webtau</url>
    <fullTitle>Znai: REST API, WebTau [Synergy With Testing]</fullTitle>
    <text>
      <text>https://testingisdocumenting.org/webtau WebTau (short for web test automation) is a testing API, command line tool and a framework to write unit, integration and end-to-end tests. Test across REST-API, Graph QL, Browser, Database, CLI and Business Logic with consistent set of matchers and concepts.Here is an example of REST API test with test artifacts capture scenario("create and access employee") { def id = http.post("/employee", [firstName: 'FN', lastName: 'LN']) { id.shouldNot == "" return id } http.doc.capture('employee-post') // capture previous HTTP call into &lt;docDir>/employee-post http.get("/employee/$id") { firstName.should == "FN" lastName.should == "LN" } http.doc.capture('employee-get') // capture previous HTTP call into &lt;docDir>/employee-get }</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/synergy-with-testing/REST-API#documentation-pipeline</url>
    <fullTitle>Znai: REST API, Documentation Pipeline [Synergy With Testing]</fullTitle>
    <text>
      <text>Documentation pipeline can look like markdown # Create Employee :include-open-api: openapi/api-spec.json {operationId: "createEmployee" } ```columns left: :include-json: doc-artifacts/employee-post/request.json { title: "request payload" } right: :include-json: doc-artifacts/employee-post/response.json { title: "response payload", pathsFile: "doc-artifacts/employee-post/paths.json" } ```</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/synergy-with-testing/REST-API#create-employee</url>
    <fullTitle>Znai: REST API, Create Employee [Synergy With Testing]</fullTitle>
    <text>
      <text>Request Responses 200 201</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/synergy-with-testing/business-logic#capture-input-example</url>
    <fullTitle>Znai: Business Logic, Capture Input Example [Synergy With Testing]</fullTitle>
    <text>
      <text>Your business logic tests can greatly improve maintainability of your documentation. The example below tests what account types are allowed to perform Trading Activities.Test is using https://github.com/testingisdocumenting/webtau WebTau testing framework to define and capture test data. package org.testingisdocumenting.testing.examples import org.junit.Test import org.testingisdocumenting.webtau.data.table.TableData import static org.testingisdocumenting.webtau.WebTauCore.* class TestToDocExample { @Test void shouldRestrictAccountsActivity() { def rules = ["Account Type" | "Operation" | "Restriction"] { _________________________________________________ "SPB3" | "Buy Options" | "weekends only" "TR" | "Sell Futures" | "except holidays" "BOSS" | "Buy Stocks" | "none" } validateRules(rules) } private static void validateRules(TableData rules) { doc.capture("account-rules", rules) // capture table data as JSON } } As part of validation of account types, the test also captures data that was used for testing. We can refer to this data later in our documentation by using the layout/tables include-table plugin :include-table: account-rules.json Your test data and user-facing documentation is now linked. Account Type Operation Restriction SPB3 Buy Options weekends only TR Sell Futures except holidays BOSS Buy Stocks none</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/plugins/plugin-types#include-plugins</url>
    <fullTitle>Znai: Plugin Types, Include Plugins [Plugins]</fullTitle>
    <text>
      <text>Znai extends markdown with plugins system to supercharge visuals and maintainability. Three categories of plugins are available for usage and creation: #include-plugins Include Plugins #inlined-code Inlined Code #fenced-block Fenced Block To use include plugin write following on a new line :include-&lt;pluginId>: [text param] [{key1: value1, key2: value2}] markdown :include-json: example.json { title: "JSON example", paths: ["root.person.id"], collapsedPaths: ["root.details"] } markdown :include-java: ../java/HelloWorld.java { entry: "sampleMethod", bodyOnly: true, commentsType: "inline" } validate(); process(p2); // important comment notifyAll(p1); // very important return bestSample();</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/plugins/plugin-types#inlined-code</url>
    <fullTitle>Znai: Plugin Types, Inlined Code [Plugins]</fullTitle>
    <text>
      <text>To use inlined code write plugin id inside backticks (`) surrounded with (:) markdown content `:&lt;pluginId>: [text param] [{key1: value1, key2: value2}]` markdown It is a `:icon: cloud` day, `:icon: clock` is ticking It is a day, is ticking</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/plugins/plugin-types#fenced-block</url>
    <fullTitle>Znai: Plugin Types, Fenced Block [Plugins]</fullTitle>
    <text>
      <text>To use fenced block plugin specify its ids after fenced block start markdown ```&lt;pluginId> [text param] [{key1: value1, key2: value2}] content ``` markdown ```tabs C++: content of C++ tab Java: content of Java tab Python: content of Python tab ``` C++ content of C++ tab Java content of Java tab Python content of Python tab</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/plugins/default-parameters#global-defaults</url>
    <fullTitle>Znai: Default Parameters, Global Defaults [Plugins]</fullTitle>
    <text>
      <text>Create plugin-params.json file to specify default parameters per plugin. { "api-parameters": { "title": "no title (set explicitly to override)" } } When the parameters file is present, any time you use snippets/api-parameters API Parameters plugin without title , an implicit title will be present</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/plugins/default-parameters#page-local-defaults</url>
    <fullTitle>Znai: Default Parameters, Page Local Defaults [Plugins]</fullTitle>
    <text>
      <text>Use page meta block at the start of a page to set plugin default parameters specific to the page.You may have seen meta block example to set flow/names Page Title: --- title: Custom Name --- Now we're going to use the same block to add plugin defaults local to the page. --- image: {border: true} --- Once we have a block like this, every visuals/images#extension include-image plugin on this page will have border set to true. markdown :include-image: visuals/regular-image.png</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/plugins/development#placeholder</url>
    <fullTitle>Znai: Development, PlaceHolder [Plugins]</fullTitle>
    <text>
      <text>Please create https://github.com/testingisdocumenting/znai/issues GitHub Issue if you are interested in plugins creation documentation.</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/configuration/basic#favicon</url>
    <fullTitle>Znai: Basic, Favicon [Configuration]</fullTitle>
    <text>
      <text>Put a favicon.png file inside the root of your docs (next to your toc file)</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/example-references/domain#trader</url>
    <fullTitle>Znai: Domain, Trader [Example References]</fullTitle>
    <text>
      <text>This page is a dummy page to demo code reference capabilities from java/description-extraction#enum-entries-with-references Java Enums and java/description-extraction#method-params-with-references parameter typesTrader reference placeholder</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/example-references/domain#transaction</url>
    <fullTitle>Znai: Domain, Transaction [Example References]</fullTitle>
    <text>
      <text>Transaction reference placeholder Buy Transaction buy placeholder Sell Transaction sell placeholder</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/example-references/api#flight-api</url>
    <fullTitle>Znai: Api, Flight API [Example References]</fullTitle>
    <text>
      <text>This page is a dummy page to demo snippets/code-references code reference capabilitiesFlight API summary placeholder</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/example-references/api#book</url>
    <fullTitle>Znai: Api, Book [Example References]</fullTitle>
    <text>
      <text>Lower level explanation of fapi.book</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/example-references/api#query</url>
    <fullTitle>Znai: Api, Query [Example References]</fullTitle>
    <text>
      <text>Lower level explanation of fapi.query</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/example-references/api#useful-action</url>
    <fullTitle>Znai: Api, Useful Action [Example References]</fullTitle>
    <text>
      <text>stub for useful action description</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/znai-development/local-build#clone-project</url>
    <fullTitle>Znai: Local Build, Clone Project [Znai Development]</fullTitle>
    <text>
      <text>git clone https://github.com/testingisdocumenting/znai.git</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/znai-development/local-build#build-tools-setup</url>
    <fullTitle>Znai: Local Build, Build Tools Setup [Znai Development]</fullTitle>
    <text>
      <text>SDK Man Easy way to maintain Java specific dependencies below is by using https://sdkman.io SDKMAN Java And Maven You need Java 8 and Maven to build Znai. sdk install java 8.0.342-amzn sdk install maven Graphviz Diagram features depend on its presence of http://www.graphviz.org/ dot when build generates documentation for Znai.Use https://brew.sh brew to install http://www.graphviz.org/ GraphViz brew install graphviz</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/znai-development/local-build#build</url>
    <fullTitle>Znai: Local Build, Build [Znai Development]</fullTitle>
    <text>
      <text>cd znai mvn clean install</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/znai-development/local-build#run-local-version</url>
    <fullTitle>Znai: Local Build, Run Local Version [Znai Development]</fullTitle>
    <text>
      <text>cd znai-dist/target unzip dist-znai.zip export PATH=$(pwd)/dist:$PATH znai --version</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/release-notes/2023#1-63</url>
    <fullTitle>Znai: 2023 Releases, 1.63 [Release Notes]</fullTitle>
    <text>
      <text>Fix: visuals/images Images null pointer when using with SVGs Fix: Table column parameters layout/tables#column-names-conflict name conflict Fix: snippets/json JSON regression with displaying null values Fix: stop badge visuals/image-annotations#badge-textual-description image annotation from pulsing when mouse moved out Fix: remove extra gap from last code snippet inside snippets/api-parameters API parameters Add: plugins/plugin-types Plugins parameters validation error message now prints in the context of plugin name and passed params Fix: snippets/code-references code reference now turns into links parts of code that is not fully recognized by highlighter Add: snippets/snippets-manipulation#surrounded-by surroundedBy validates that content is not empty after extraction Add: snippets/open-API Open API summary field validation when using autoSection: true Add: snippets/CLI#output-highlight CLI Output Highlight now matches sub-lines ignoring colors ANSI sequence Add: JSON snippets/json#enclose-in-object Enclose In Object Add: JSON format for snippets/code-references Code References Add: better alignment of multiple snippets/CLI CLI Commands in a row and when surrounded by text Add: snippets/CLI#output-highlight console output and snippets/external-code-snippets code snippets trim empty lines from start/end when no extraction specific params is set Add: include and exclude to snippets/snippets-manipulation#include-contains include/exclude lines using contains Add: excludeStart and excludeEnd as separate options to snippets/snippets-manipulation snippets manipulation Add: snippets/inlined-code-snippets#validated-identifier identifier support for multiple validation paths. Example of using default parameters to simplify flow. Add: noGap option for images, tables, snippets and API parameters is only required for the first entry, second can omit it. If it does, third entry will have a gap again above. This helps with groups of snippets/tables/etc. Add: snippets/CLI#wide-mode Wide Mode for CLI Output</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/release-notes/2022#1-62</url>
    <fullTitle>Znai: 2022 Releases, 1.62 [Release Notes]</fullTitle>
    <text>
      <text>Fix: Flow Diagrams visuals/flow-diagrams#multiline-labels multi line support when color or shape is set Add: handle property title in snippets/open-API Open API Doc: add clarification to dummy code reference page for example-references/domain java and example-references/api generic Add: plugins/default-parameters#page-local-defaults Plugin Page Local Defaults Add: plugins/default-parameters#global-defaults Plugin Global Defaults Add: JavaDoc java/description-extraction#markdown markdown support Add: CLI Output snippets/CLI#anchor anchor support Add: snippets/CLI CLI Output plugin formal parameters validation Add: Report misprinted inlined code plugin Add: snippets/markdown#inlined-markdown Inlined Markdown plugin Add: layout/tables Table and visuals/cards Card integration Add: Table layout/tables#wide-mode wide mode centered title Add: JSON snippets/json#anchor anchor id support Add: enum type formal parameters for plugins</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/release-notes/2022#1-61-2</url>
    <fullTitle>Znai: 2022 Releases, 1.61.2 [Release Notes]</fullTitle>
    <text>
      <text>Fix: visuals/cards Card recognizes additional images inside to include into dist.</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/release-notes/2022#1-61-1</url>
    <fullTitle>Znai: 2022 Releases, 1.61.1 [Release Notes]</fullTitle>
    <text>
      <text>Fix: Null Pointer in some cases of URL resolve Fix: Display stacktrace within plugin to identify problems easier Add: Report visuals/image-annotations Image Annotations that are outside of image boundaries</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/release-notes/2022#1-61</url>
    <fullTitle>Znai: 2022 Releases, 1.61 [Release Notes]</fullTitle>
    <text>
      <text>Fix: flow/names#name-overrides page title override for index page Fix: java/content-extraction#anchor Java Anchor linking from pages incorrect validation Fix: flow/page-references#links-links-to-subsection local ref in index page link doesn't add /index to url on ref click Doc: layout/tables#multiline-content Table Multiline Content Add: layout/tables#filter-rows Table Regexp Filter Remove layout/tables Table gap in layout/tables#wide-mode wide mode</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/release-notes/2022#1-60</url>
    <fullTitle>Znai: 2022 Releases, 1.60 [Release Notes]</fullTitle>
    <text>
      <text>Fix: visuals/images#fit Fit Image in mobile view Doc: znai-development/local-build Local Build instructions Add: Three columns layout/columns#three-columns Layout**** Add: visuals/cards Cards Add: Auto anchor id from title for layout/tables#title Tables Add: Auto anchor id from title for snippets/external-code-snippets#title Snippets Add: Auto anchor id from title for visuals/images#title Images Add: Table layout/tables#no-gap No Gap Add: Table layout/tables#collapse Collapse Add: snippets/external-code-snippets#highlights highlight by text highlights all matches Add: API Parameters snippets/api-parameters#no-gap No Gap Remove visuals/images Image padding in mobile view Add: Image visuals/images#collapse Collapse Add: Image visuals/images#no-gap No Gap Add: Mobile and Desktop only visuals/images#mobile-and-desktop-only Images Add: Python content python/content-extraction#anchor Anchor Add: Java content java/content-extraction#anchor Anchor Rename: compact property is now snippets/external-code-snippets#no-gap noGap Add: layout/tables Table formal parameters support Add: Table layout/tables#anchor Anchor Add: Image visuals/images#anchor Anchor Add: snippets/external-code-snippets#my-code-anchor External Snippet Anchor Add: Attention Sign visuals/attention-signs#fence-block Fence Block</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/release-notes/2022#1-59-1</url>
    <fullTitle>Znai: 2022 Releases, 1.59.1 [Release Notes]</fullTitle>
    <text>
      <text>Fix: java/content-extraction#method-body include-java body only takes first method when overloads are present but no types are specified Fix: next/prev page chapter name is properly rendered (was undefined) Fix: layout/tabs Tabs don't confuse Fence block of snippets/api-parameters API Parameters with tab name Fix: remove possible duplication of snippets/api-parameters API Parameters when param names match Add tooltip to TOC items to display full title in case of overflow Add syntax highlight for SQL , GraphQL , Cypher snippets/code-snippets#specifying-language code snippets Add visuals/attention-signs#tip Tip and visuals/attention-signs#recommendation Recommendation attention signs visuals/PlantUml PlantUml version bump to 1.2022.6</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/release-notes/2022#1-59</url>
    <fullTitle>Znai: 2022 Releases, 1.59 [Release Notes]</fullTitle>
    <text>
      <text>Fix: Centered visuals/images Image with horizontal scrollbar doesn't cut parts of image anymore Fix: visuals/images#fit Image Zoom now has vertical scroll for tall images Add visuals/charts#time-series Time Series option to visuals/charts Charts Add snippets/open-API Open API 3 support Add snippets/external-code-snippets#no-gap compact option to snippets/external-code-snippets Code Snippets Add snippets/external-code-snippets#collapse collapsible option to snippets/external-code-snippets Code Snippets snippets/api-parameters API Parameters expand nested by default when single root parameter Add snippets/api-parameters#collapsing-parameters collapsible option to snippets/api-parameters API Parameters Add title support for visuals/images#standard-markdown Standard Markdown Image Add code snippets class color to be distinct from the regular text Add flow/names#chapter-names Chapter Title Override via toc file</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/release-notes/2022#1-58</url>
    <fullTitle>Znai: 2022 Releases, 1.58 [Release Notes]</fullTitle>
    <text>
      <text>Fix: Maven Plugin race condition between shutdown hook and apache FileUtils class unload Fix: CPP/auto-reference CPP Auto Ref method link color Fix: highlight python code snippet decorator Fix: Python multi-line token color during snippet render Fix: python multiline string parsing to properly highlight lines Fix: snippets/json JSON rendering order Fix: search popup on iPad now fits a browser window Fix: Enable visuals/images Image click to zoom on scaled down images Fix: layout/columns Column rendering when content starts with a link Fix: Empty layout/columns Column rendering crash Fix: visuals/images#border Image bottom border rendering Fix: Image explicit scale now respects visuals/image-annotations Annotations Placement Fix: iPad layout adjustments to battle 100vh rendering feature Doc: how to include snippets/json#incomplete-json json that is not valid Doc: Improved Examples on synergy-with-testing/web-UI Synergy With Testing Doc: Move CPP/doxygen-setup CPP to its own chapter Doc: Move python/content-extraction Python to its own chapter Doc: Move java/content-extraction Java to its own chapter Doc: fix example of flow/lookup-paths#class-path-lookup classpath lookup Rework layout/templates Templates example Doc: visuals/icons#inside-tables Table with Icons example Doc: Document visuals/image-annotations#pixel-ratio Image Pixel Ratio Doc: Update layout/columns Columns examples and text refactoring Doc: Rework introduction/what-is-this What Is This with more examples and reorganized order Doc: snippets/json#test-results JSON WebTau example Add visuals/image-annotations Auto Annotation Color for JSON annotations Add snippets/markdown#multiple-markdown-files include-markdowns sort parameter Image Annotation visuals/image-annotations#annotations-file From CSV File Add caching to python/auto-reference Python Parsing Add visuals/image-annotations#rectangles-and-arrows Rectangles And Arrows image annotations Add visuals/image-annotations#rectangles-and-arrows Rectangles And Arrows Tooltips Parse python/description-extraction#doc-parameters Python Returns PyDoc section Render python/auto-reference#fin-money-money-properties Python Properties as snippets/api-parameters API Parameters Reflect visuals/headings Heading Style in Table Of Contents menu panel Add python/auto-reference#class-definition include-python-class: package.ClassName to display and define a class Add python/auto-reference#method-function-definition include-python-method: package.method_name to display a function signature, documentation and parameters Tweak color of code snippets of lang=markdown Removed global-references.js for handling cross-references in favor of lazy url evaluation at page generation time Add Python Doc params python/description-extraction#type-hints Type Hint support visuals/mermaid-diagrams#wide-mode Mermaid Diagrams Wide Mode visuals/mermaid-diagrams#external-file Mermaid Diagrams External File Add Graphviz visuals/graphviz-diagrams#fenced-block fenced block support Add collapse button for snippets/external-code-snippets#read-more Snippet Read More visuals/mermaid-diagrams Mermaid Diagrams dark mode and auto them switch visuals/image-annotations#manual-coordinates Image Annotation Coordinates during preview mode Change arrow visuals/image-annotations Image Annotations style to be single color and use tooltip Add automatic visuals/image-annotations Image Annotations badges textual description tooltips via ordered list Add tooltip for snippets/code-comments Code Comments Bullet Points Tweak visuals/images#fit Image Zoom style in dark and light themes Add snippets/api-parameters#wide-mode API Parameters Wide Mode Tweak snippets/api-parameters#title API Parameters Title style Add snippets/api-parameters API Parameters plugin parameters definition New visuals/images#title Image Title look and feel Add flow/support Support Title Add snippets/json#hidden-parts JSON Collapsed Paths validation Add formal plugin parameters to visuals/images Image Plugin Add visuals/image-annotations#badges Image Badge Annotation auto color detection Add snippets/json JSON fence plugin Add snippets/json JSON parameters formalization Add snippets/json#title JSON Auto Title feature Add Java Plugins parameters definition Add initial plugin parameters formalization. Enforce parameters validation for snippets/snippets-manipulation File Plugin Add snippets/json#code-references JSON Code References support More prominent colors for highlight of snippets/json JSON value Better error message in case of wrong znai CLI argument name Add --version param to znai CLI</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/release-notes/2022#1-57</url>
    <fullTitle>Znai: 2022 Releases, 1.57 [Release Notes]</fullTitle>
    <text>
      <text>Fix: selected TOC item padding Fix: layout/tables Table text selection during preview is not auto deselected Fix: snippets/external-code-snippets#read-more read more option change during preview now properly updates the snippet Fix: snippets/math Latex more complex math render by adding missing fonts Fix: remove extra top margin in case of code snippet in between code snippets in two columns mode Fix: markdown snippets render extra new line at the end Fix: search preview popup has fixed height now to avoid size jump Use standard args parsing for flow/lookup-paths#cli-parameter CLI Lookup Paths Add CPP/doxygen-setup#setup Doxygen From Zip support Add visuals/charts#presentation Charts Presentation support for all breakpoint support that creates a slide for every textual value Add visuals/charts#presentation Charts Presentation breakpoint validation Add visuals/charts#presentation Bar Chart presentation mode breakpoints support Add flow/lookup-paths#zip-and-jar-lookup Zip and Jar lookup path support to access content from within archives Add visuals/charts#presentation Pie Chart presentation mode breakpoints support Better validation of snippets/api-parameters#external-json-file API Parameters input JSON Add automatic hard wrap and snippets/api-parameters#long-parameter-names noWrap option to snippets/api-parameters API Parameters to handle long parameter names without spaces Add visuals/smart-bullet-points#steps Smart Bullets Points Steps align option Add visuals/charts#wide-mode Charts Wide Mode Add visuals/charts#inlined-data Charts Inlined Data Add visuals/images#external-image External Images support and image URL validation Add presentation support for visuals/charts#presentation Line Chart breakpoints Remove generic include-chart plugin that uses Victory Chart for rendering Add visuals/charts#legend chart legend Add dark theme support for visuals/charts Charts Migrate visuals/charts#pie Pie Chart to https://echarts.apache.org/ ECharts Migrate visuals/charts#line Line Chart to https://echarts.apache.org/ ECharts Add stack mode to visuals/charts#bar Bar Chart visuals/charts#bar Bar Chart horizontal mode with height setting Add multiple values per tick support to visuals/charts#bar Bar Chart Wrap code option for snippets/code-snippets#wrap-code Fence Block and snippets/external-code-snippets#wrap-code External Code Landing hub opens documentation in the same window and not a new tab Add snippets/snippets-manipulation#multiple-surrounded-by surrounded by null as separator value No extra separator for java/content-extraction#multiple-entries java and snippets/groovy#multiple-bodies groovy entries separator</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/release-notes/2022#1-56</url>
    <fullTitle>Znai: 2022 Releases, 1.56 [Release Notes]</fullTitle>
    <text>
      <text>Fix: search result preview highlight across styles Fix highlight code lines when multiline comment is present (e.g. /* */ ) Fix: using : , - , + chars in Search doesn't lead to crash anymore Fix: search popup window height is consistent size when jumping between results Added snippets/markdown#partial-markdown include partial markdown Added multiple entries separator for java/content-extraction#multiple-bodies Java and snippets/groovy#multiple-bodies Groovy Added snippets/groovy#multiple-bodies multiple bodies only using entry for Groovy Added java/content-extraction#multiple-bodies multiple bodies only using entry for Java flow/landing index.md is now optional Add validate external links flag --validate-external-links Add visuals/image-annotations#badges image fence plugin with badge annotations Handle loop reference in snippets/open-API Open API Generate plugin params usage statistics file Generate plugins usage statistics file</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/release-notes/2021#1-55</url>
    <fullTitle>Znai: 2021 Releases, 1.55 [Release Notes]</fullTitle>
    <text>
      <text>Doc: moved snippets/snippets-manipulation Snippets Manipulation to its own page Doc: rewrite of introduction/what-is-this What Is This starting page Extra spacing between section title and visuals/text-badge#part-of-heading its badge Color tweaks for snippets/code-comments#callout-comments code snippet bullet points and visuals/text-badge text badge for light and dark theme Normalize doxygen member CPP/auto-reference#specific-member-by-args selection by args Add snippets/snippets-manipulation#replace Replace snippet manipulation Add snippets/snippets-manipulation#multiple-surrounded-by Surrounded By Multiple blocks support Add snippets/CLI CLI fence plugin Tweaked text selection color for dark theme Fix: snippets/CLI#ansi-colors-output CLI ANSI output background colors Fix: snippets highlight regression Fix: win cmd script to include passed params</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/release-notes/2021#1-54</url>
    <fullTitle>Znai: 2021 Releases, 1.54 [Release Notes]</fullTitle>
    <text>
      <text>Doc: more examples Add Doxygen CPP/description-extraction#ignore-template-parameters ignore template parameter Add Doxygen member CPP/auto-reference#all-matching-signatures select by args Add CPP/auto-reference#specific-member-by-args doxygen all overloads at once Add CPP/auto-reference#compound doxygen compound to include class description and methods/attributes Add java/description-extraction#inner-classes inner classes reference to java doc parsing Add visuals/headings API heading style Add CPP/auto-reference#member-signature-only doxygen member signature Add CPP/description-extraction#extract-parameters doxygen docs params to embed as snippets/api-parameters API parameters Add CPP/description-extraction doxygen docs to embed comments text Add visuals/text-badge#part-of-heading heading text badge Add visuals/text-badge text badge Add snippets/code-comments#remove-comments commentsType: remove to remove comments from a code snippet Add uploadzip command to upload any html zip to znai hub Add visuals/graphviz-diagrams graphviz include plugin Plugin parameters parsing error provides more details about plugin id and provided parameters Add include , fence and inline code plugin failure context: id, params Add layout/tabs Tabs presence validation Enhance python/content-extraction python variable extraction to include all assignments, not just global variables Fix: Enterprise nix based authz last user group is now taken into account Fix: icon alignment regression in visuals/attention-signs Attention Paragraphs</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/release-notes/2021#1-53</url>
    <fullTitle>Znai: 2021 Releases, 1.53 [Release Notes]</fullTitle>
    <text>
      <text>Add support for parameter names with dashes ( - ) to python/description-extraction#doc-parameters python doc params Fix visuals/image-annotations Image Annotations placement when fit: true is present Fix python/content-extraction python variable extraction crashing in certain cases by adding more checks Fix: Parsing of Python data classes that include default field values</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/release-notes/2021#1-52</url>
    <fullTitle>Znai: 2021 Releases, 1.52 [Release Notes]</fullTitle>
    <text>
      <text>Add enterprise server log rotation Force max width for type and name for snippets/api-parameters API Parameters. Reduce title height. Exclude Parameters section type during python/description-extraction#doc-string python doc parsing Handle optional type during python/description-extraction#doc-parameters python doc params parsing Added Scala syntax highlight Added layout/tables#highlight Table row highlight by index Handle dash ( ---- ) for python/description-extraction#doc-parameters python doc params parsing Add flow/page-toc Page Table Of Contents Add Table layout/tables#wide-mode wide mode Add Table layout/tables#min-width column min width Add layout/tables#width Table percentage width Add Windows znai.cmd script Add support for variables to python/content-extraction include-python and revamped the entire doc section Fix: Table layout/tables#title title rendering when scroll is present</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/release-notes/2021#1-51</url>
    <fullTitle>Znai: 2021 Releases, 1.51 [Release Notes]</fullTitle>
    <text>
      <text>Doc: introduction/getting-started#command-line-brew brew install instruction Added initial python/description-extraction#doc-parameters pythod doc params support Python parsing is more robust and partially work with older versions of python Explicit use of annotate:true to use matching visuals/image-annotations#annotations-path-shortcut image annotations file Fix: handle dashes in visuals/flow-diagrams flow diagram node ids</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/release-notes/2021#1-50</url>
    <fullTitle>Znai: 2021 Releases, 1.50 [Release Notes]</fullTitle>
    <text>
      <text>Doc: clarify introduction/getting-started Getting Started documentation section visuals/image-annotations Image badge annotation becomes transparent on hover Add python/content-extraction include-python to include function's content Rename paramsToHighlight -> highlight for include-cli-command plugin Rename scaleRatio -> scale for include-image plugin Add click to zoom image that was fit: true Preview footer change detection Add surroundedB to include-file like plugins: snippets/snippets-manipulation#surrounded-by documentaiton Add inlined code snippet with automatic identifier validation by looking into a provided file: snippets/inlined-code-snippets#validated-identifier documentaiton Validate JSON path for highlighting Validate XML path for highlighting Validate that snippets/snippets-manipulation#include-regexp snippets include/exclude matches lines Prints port info when port is taken during preview More permissive json parsing Added python/description-extraction#doc-string include-python-doc to extract python docs as markdown text and add it to a page Enterprise file monitor validates monitor path Fix: extra margin in Columns Layout when code snippets in both columns goes after a code snippet Fix: auto jump to a changed page and highlight the right place. It was jumping to the right place, but was highlighting date time as the first change for pages that were last modified not in the same day. Fix: include-meta does not override plugin specific meta anymore Fix: restore scroll position on back button Fix: XML alignment and remove extra empty line</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/release-notes/2021#1-49</url>
    <fullTitle>Znai: 2021 Releases, 1.49 [Release Notes]</fullTitle>
    <text>
      <text>No notes</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/release-notes/2021#1-48</url>
    <fullTitle>Znai: 2021 Releases, 1.48 [Release Notes]</fullTitle>
    <text>
      <text>No notes</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/release-notes/2021#1-47</url>
    <fullTitle>Znai: 2021 Releases, 1.47 [Release Notes]</fullTitle>
    <text>
      <text>No notes</text>
      <score>STANDARD</score>
    </text>
  </entry>
  <entry>
    <url>/znai/release-notes/2021#1-46</url>
    <fullTitle>Znai: 2021 Releases, 1.46 [Release Notes]</fullTitle>
    <text>
      <text>No notes</text>
      <score>STANDARD</score>
    </text>
  </entry>
</znai>
